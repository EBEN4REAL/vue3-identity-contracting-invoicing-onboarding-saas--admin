/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/service-providers/{service_provider_id}/agreement-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Agreement Types of a Service Provider */
        get: operations["agreement_types_read_service_providers__service_provider_id__agreement_types_get"];
        put?: never;
        /** Creates an Agreement Type for a Service Provider */
        post: operations["agreement_types_create_service_providers__service_provider_id__agreement_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an Agreement Type of a Service Provider */
        get: operations["agreement_type_read_service_providers__service_provider_id__agreement_types__agreement_type_id__get"];
        put?: never;
        post?: never;
        /** Removes an Agreement Type from a Service Provider */
        delete: operations["agreement_type_delete_service_providers__service_provider_id__agreement_types__agreement_type_id__delete"];
        options?: never;
        head?: never;
        /** Updates an Agreement Type of a Service Provider */
        patch: operations["agreement_type_edit_service_providers__service_provider_id__agreement_types__agreement_type_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}/policy-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Policy Types of an Agreement Type for a Service Provider */
        put: operations["update_policy_types_of_agreement_type_service_providers__service_provider_id__agreement_types__agreement_type_id__policy_types_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}/policy-types/{policy_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a Policy Type from an Agreement Type for a Service Provider */
        delete: operations["remove_policy_type_from_agreement_type_service_providers__service_provider_id__agreement_types__agreement_type_id__policy_types__policy_type_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}/legal-document-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all Legal Document Types for an Agreement Type */
        get: operations["get_legal_document_types_for_agreement_type_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types_get"];
        put?: never;
        /** Add Legal Document Type to Agreement Type */
        post: operations["add_agreement_type_to_legal_document_types_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        /** Update Agreement Type to Legal Document Type */
        patch: operations["update_agreement_type_to_legal_document_types_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types_patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}/legal-document-types/{legal_document_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Legal Document Type from Agreement Type */
        delete: operations["delete_agreement_type_to_legal_document_types_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types__legal_document_type_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/attribute-sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Attribute Sets that belong to a Service Provider */
        get: operations["get_attribute_sets_service_providers__service_provider_id__attribute_sets_get"];
        put?: never;
        /** Creates an Attribute Set for a Service Provider */
        post: operations["attribute_sets_create_service_providers__service_provider_id__attribute_sets_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/attribute-sets/{attribute_set_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read an Attribute Set */
        get: operations["attribute_set_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__get"];
        put?: never;
        post?: never;
        /** Deletes an Attribute Set */
        delete: operations["attribute_set_delete_service_providers__service_provider_id__attribute_sets__attribute_set_id__delete"];
        options?: never;
        head?: never;
        /** Updates an Attribute Set */
        patch: operations["attribute_set_edit_service_providers__service_provider_id__attribute_sets__attribute_set_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/attribute-sets/{attribute_set_id}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the OAuth Clients used by an Attribute Set */
        get: operations["attribute_set_usage_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/configs/{config_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read a Config */
        get: operations["config_read_service_providers__service_provider_id__configs__config_id__get"];
        put?: never;
        post?: never;
        /** Delete a Config */
        delete: operations["config_delete_service_providers__service_provider_id__configs__config_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/configs/{config_id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Publish a Config */
        post: operations["config_publish_service_providers__service_provider_id__configs__config_id__publish_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/configs/{config_id}/changes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read a Config */
        get: operations["config_change_read_service_providers__service_provider_id__configs__config_id__changes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Service Provider Entitlements */
        get: operations["get_entitlements_service_providers__service_provider_id__entitlements_get"];
        put?: never;
        /** Creates a Service Provider Entitlement */
        post: operations["create_entitlement_service_providers__service_provider_id__entitlements_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/entitlements/{entitlement_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Service Provider Entitlement */
        get: operations["get_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__get"];
        put?: never;
        post?: never;
        /** Delete Service Provider Entitlement */
        delete: operations["delete_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__delete"];
        options?: never;
        head?: never;
        /** Updates a Service Provider Entitlement */
        patch: operations["update_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Policy Type Entitlements for a Service Provider */
        get: operations["policy_type_entitlements_read_service_providers__service_provider_id__policy_types__policy_type_id__entitlements_get"];
        put?: never;
        /** Creates a Policy Type Entitlements for a Service Provider */
        post: operations["policy_type_entitlements_create_service_providers__service_provider_id__policy_types__policy_type_id__entitlements_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/entitlements/{entitlement_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Policy Type Entitlement for a Service Provider */
        delete: operations["policy_type_entitlement_delete_service_providers__service_provider_id__policy_types__policy_type_id__entitlements__entitlement_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Filters of a Service Provider */
        get: operations["get_filters_by_service_provider_service_providers__service_provider_id__filters_get"];
        put?: never;
        /** Creates a Filter for a Service Provider */
        post: operations["filters_create_service_providers__service_provider_id__filters_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/filters/{filter_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Filter of a Service Provider */
        get: operations["filter_read_service_providers__service_provider_id__filters__filter_id__get"];
        put?: never;
        post?: never;
        /** Removes a Filter from a Service Provider */
        delete: operations["filter_delete_service_providers__service_provider_id__filters__filter_id__delete"];
        options?: never;
        head?: never;
        /** Updates a Filter of a Service Provider */
        patch: operations["filter_edit_service_providers__service_provider_id__filters__filter_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policy Types of a Service Provider */
        get: operations["policy_types_read_service_providers__service_provider_id__policy_types_get"];
        put?: never;
        /** Creates a Policy Type for a Service Provider */
        post: operations["policy_types_create_service_providers__service_provider_id__policy_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Policy Type of a Service Provider */
        get: operations["policy_type_read_service_providers__service_provider_id__policy_types__policy_type_id__get"];
        put?: never;
        post?: never;
        /** Removes a Policy Type from a Service Provider */
        delete: operations["policy_type_delete_service_providers__service_provider_id__policy_types__policy_type_id__delete"];
        options?: never;
        head?: never;
        /** Updates the Policy Types of a Service Provider */
        patch: operations["policy_type_edit_service_providers__service_provider_id__policy_types__policy_type_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/child-policy-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Child Policy Types of Policy Type for a Service Provider */
        get: operations["policy_type_child_policy_types_read_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types_get"];
        /** Updates the Child Policy Types of a Policy Type for a Service Provider */
        put: operations["policy_type_child_policy_types_update_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/child-policy-types/{child_policy_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes a Child Policy Type from a Policy Type for a Service Provider */
        delete: operations["policy_type_child_policy_types_delete_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types__child_policy_type_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Filters of Policy Type for a Service Provider */
        get: operations["policy_type_filters_read_service_providers__service_provider_id__policy_types__policy_type_id__filters_get"];
        put?: never;
        /** Adds a Filter to a Policy Type for a Service Provider */
        post: operations["add_filter_to_policy_type_service_providers__service_provider_id__policy_types__policy_type_id__filters_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/filters/{filter_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes a Filter from a Policy Type for a Service Provider */
        delete: operations["delete_filter_from_policy_type_service_providers__service_provider_id__policy_types__policy_type_id__filters__filter_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Policy Type Role for a Service Provider */
        get: operations["policy_types_roles_read_service_providers__service_provider_id__policy_types__policy_type_id__roles_get"];
        /** Update Policy Type Roles for a Service Provider */
        put: operations["policy_types_role_update_service_providers__service_provider_id__policy_types__policy_type_id__roles_put"];
        /** Creates a Policy Type Role for a Service Provider */
        post: operations["policy_types_role_create_service_providers__service_provider_id__policy_types__policy_type_id__roles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Policy Type Role for a Service Provider */
        delete: operations["policy_type_role_delete_service_providers__service_provider_id__policy_types__policy_type_id__roles__role_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/legal-document-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all legal document types of a Service provider. */
        get: operations["get_legal_document_types_service_providers__service_provider_id__legal_document_types_get"];
        put?: never;
        /** Creates an empty, non-finished legal document type, returns its ID. */
        post: operations["create_legal_document_type_service_providers__service_provider_id__legal_document_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/legal-document-types/{legal_document_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a legal document type */
        get: operations["get_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__get"];
        put?: never;
        post?: never;
        /** Delete legal document. */
        delete: operations["delete_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__delete"];
        options?: never;
        head?: never;
        /** Finishes the creation of a legal document type if initial_setup is True, otherwise updates it. */
        patch: operations["update_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/legal-document-types/{legal_document_type_id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get PDF Pre Signed URL for a legal document type. */
        get: operations["get_legal_document_type_pdf_url_service_providers__service_provider_id__legal_document_types__legal_document_type_id__pdf_get"];
        put?: never;
        /** Upload a PDF for a legal document type. */
        post: operations["upload_legal_document_type_pdf_service_providers__service_provider_id__legal_document_types__legal_document_type_id__pdf_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-attribute-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List resource attribute types */
        get: operations["get_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types_get"];
        put?: never;
        /** Create resource attribute type */
        post: operations["create_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-attribute-types/{resource_attribute_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read resource attribute type */
        get: operations["read_resource_attribute_type_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__get"];
        put?: never;
        post?: never;
        /** Removes a Resource Attribute Type */
        delete: operations["delete_resource_attribute_type_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__delete"];
        options?: never;
        head?: never;
        /** Update resource attribute type */
        patch: operations["update_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Resource Types for a Service Provider */
        get: operations["resource_types_read_service_providers__service_provider_id__resource_types_get"];
        put?: never;
        /** Creates a Resource Type for a Service Provider */
        post: operations["resource_types_create_service_providers__service_provider_id__resource_types_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-types/{resource_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Resource Type */
        get: operations["get_resource_type_service_providers__service_provider_id__resource_types__resource_type_id__get"];
        put?: never;
        post?: never;
        /** Deletes a Resource Type */
        delete: operations["resource_type_delete_service_providers__service_provider_id__resource_types__resource_type_id__delete"];
        options?: never;
        head?: never;
        /** Updates a Resource Type */
        patch: operations["resource_type_edit_service_providers__service_provider_id__resource_types__resource_type_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Roles for a Service Provider */
        get: operations["roles_read_service_providers__service_provider_id__roles_get"];
        put?: never;
        /** Creates a Role for a Service Provider */
        post: operations["roles_create_service_providers__service_provider_id__roles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Reads Role for a Service Provider */
        get: operations["role_read_service_providers__service_provider_id__roles__role_id__get"];
        put?: never;
        post?: never;
        /** Delete Role for a Service Provider */
        delete: operations["role_delete_service_providers__service_provider_id__roles__role_id__delete"];
        options?: never;
        head?: never;
        /** Updates Role for a Service Provider */
        patch: operations["roles_update_service_providers__service_provider_id__roles__role_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the OAuth Clients associated with a Service Provider */
        get: operations["oauth_clients_read_service_providers__service_provider_id__oauth_clients_get"];
        put?: never;
        /** Creates an OAuth Client associated with a Service Provider */
        post: operations["oauth_clients_create_service_providers__service_provider_id__oauth_clients_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the OAuth Client associated with the Service Provider */
        get: operations["oauth_client_read_service_providers__service_provider_id__oauth_clients__oauth_client_id__get"];
        put?: never;
        post?: never;
        /** Removes the OAuth Client associated with the Service Provider */
        delete: operations["oauth_client_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__delete"];
        options?: never;
        head?: never;
        /** Updates service provider oauth client */
        patch: operations["oauth_client_edit_service_providers__service_provider_id__oauth_clients__oauth_client_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/secret": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Generates a new Secret for the OAuth Client associated with the Service Provider */
        put: operations["oauth_client_secret_edit_service_providers__service_provider_id__oauth_clients__oauth_client_id__secret_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/secrets/{oauth_client_secret_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete the OAuth Client Secret */
        delete: operations["oauth_client_secret_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__secrets__oauth_client_secret_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create the OAuth Client Secret */
        post: operations["oauth_client_secret_create_service_providers__service_provider_id__oauth_clients__oauth_client_id__secrets_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/attribute-sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Attribute Sets to the OAuth Client */
        put: operations["oauth_client_attribute_sets_update_service_providers__service_provider_id__oauth_clients__oauth_client_id__attribute_sets_put"];
        /** Add Attribute Sets to the OAuth Client */
        post: operations["oauth_client_attribute_sets_create_service_providers__service_provider_id__oauth_clients__oauth_client_id__attribute_sets_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/attribute-sets/{attribute_set_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete OAuth Client Attribute Set */
        delete: operations["oauth_client_attribute_sets_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__attribute_sets__attribute_set_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a Service Provider */
        get: operations["service_provider_read_service_providers__service_provider_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/global-oauth-client-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the Global OAuth Client Settings */
        get: operations["oauth_client_get_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_get"];
        /** Updates the Global OAuth Client Settings */
        put: operations["oauth_client_update_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/wizards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a Wizard */
        post: operations["wizards_create_service_providers__service_provider_id__wizards_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/wizards/{wizard_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a Wizard */
        get: operations["wizard_read_service_providers__service_provider_id__wizards__wizard_id__get"];
        put?: never;
        post?: never;
        /** Deletes a Wizard */
        delete: operations["wizard_deletion_service_providers__service_provider_id__wizards__wizard_id__delete"];
        options?: never;
        head?: never;
        /** Updates a Wizard */
        patch: operations["wizard_edit_service_providers__service_provider_id__wizards__wizard_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/wizards/{wizard_id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns a Wizard */
        post: operations["wizard_publish_service_providers__service_provider_id__wizards__wizard_id__publish_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/wizards/application-wizard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Application Role Based Wizard Creation */
        post: operations["application_wizard_create_service_providers__service_provider_id__wizards_application_wizard_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/wizards/basic-application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Basic Application Wizard Creation */
        post: operations["basic_application_wizard_create_service_providers__service_provider_id__wizards_basic_application_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/wizards/{wizard_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Status for a Wizard */
        get: operations["wizard_status_read_service_providers__service_provider_id__wizards__wizard_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wizard-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Wizard Types */
        get: operations["wizard_types_read_wizard_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wizard-types/{wizard_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Wizard Type */
        get: operations["wizard_type_read_wizard_types__wizard_type_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/sections/{section_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Section of a Wizard */
        get: operations["section_read_service_providers__service_provider_id__sections__section_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates a Section of a Wizard */
        patch: operations["section_edit_service_providers__service_provider_id__sections__section_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/sections/{section_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Status for a Section of a Wizard */
        get: operations["section_status_read_service_providers__service_provider_id__sections__section_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/section-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Section Types */
        get: operations["section_types_read_section_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/section-types/{section_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Section Type */
        get: operations["section_type_read_section_types__section_type_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Load Data
         * @description Loads initial dataset in DEBUG / Dev Environment.
         *     Not usable for (pre-)production
         *     The dataset id corresponds with the datasets in the tests part of the project
         */
        get: operations["load_data_load__dataset_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unload/e2e": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Unload E2E */
        get: operations["unload_e2e_unload_e2e_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AgreementTypeCategory
         * @enum {string}
         */
        AgreementTypeCategory: "UNKNOWN" | "ACCESS" | "SUBSCRIPTION";
        /** AgreementTypeCreate */
        AgreementTypeCreate: {
            billing_type?: components["schemas"]["BillingType"] | null;
            /** Billing Period Length */
            billing_period_length?: number | null;
            billing_period_unit?: components["schemas"]["BillingPeriodUnit"] | null;
            /** Default Policy Types */
            default_policy_types?: string[] | null;
            /** Optional Policy Types */
            optional_policy_types?: string[] | null;
            /** Name */
            name: string | null;
            /** Description */
            description?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /**
             * Marketing Features
             * @default []
             */
            marketing_features: string[];
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            price?: components["schemas"]["PriceUpdate"] | null;
            /**
             * Prices
             * @default []
             */
            prices: components["schemas"]["PriceUpdate"][] | null;
            /** External Facing Name */
            external_facing_name?: string;
            /** External Facing Description */
            external_facing_description?: string | null;
        };
        /** AgreementTypeLegalDocumentTypeRead */
        AgreementTypeLegalDocumentTypeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
            /**
             * Legal Document Type Id
             * Format: uuid
             */
            legal_document_type_id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
        };
        /** AgreementTypePoliciesRead */
        AgreementTypePoliciesRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description?: string | null;
            /** Default Policies */
            default_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Optional Policies */
            optional_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Name */
            name: string | null;
            /** Description */
            description?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /**
             * Marketing Features
             * @default []
             */
            marketing_features: string[];
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            billing_type: components["schemas"]["BillingType"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Agreements Count */
            agreements_count: number;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Published */
            published: boolean;
            /** Billing Period Length */
            billing_period_length: number | null;
            billing_period_unit: components["schemas"]["BillingPeriodUnit"] | null;
            price?: components["schemas"]["PriceRead"] | null;
            /**
             * Prices
             * @default []
             */
            prices: components["schemas"]["PriceRead"][];
        };
        /** AgreementTypePolicyTypeRead */
        AgreementTypePolicyTypeRead: {
            /**
             * Policy Type Id
             * Format: uuid
             */
            policy_type_id: string;
            /**
             * Optional
             * @default false
             */
            optional: boolean;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
        };
        /** AgreementTypePolicyTypeUpdate */
        AgreementTypePolicyTypeUpdate: {
            /**
             * Policy Type Id
             * Format: uuid
             */
            policy_type_id: string;
            /**
             * Optional
             * @default false
             */
            optional: boolean;
        };
        /** AgreementTypeToLegalDocumentTypeUpdate */
        AgreementTypeToLegalDocumentTypeUpdate: {
            /** Legal Document Type Ids */
            legal_document_type_ids: string[];
        };
        /** AgreementTypeUpdate */
        AgreementTypeUpdate: {
            billing_type?: components["schemas"]["BillingType"] | null;
            /** Billing Period Length */
            billing_period_length?: number | null;
            billing_period_unit?: components["schemas"]["BillingPeriodUnit"] | null;
            /** Default Policy Types */
            default_policy_types?: string[] | null;
            /** Optional Policy Types */
            optional_policy_types?: string[] | null;
            /** Name */
            name: string | null;
            /** Description */
            description?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /** Marketing Features */
            marketing_features?: string[] | null;
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            price?: components["schemas"]["PriceUpdate"] | null;
            /**
             * Prices
             * @default []
             */
            prices: components["schemas"]["PriceUpdate"][] | null;
            /** External Facing Name */
            external_facing_name?: string | null;
            /** External Facing Description */
            external_facing_description?: string | null;
        };
        /** ApplicationWizardCreate */
        ApplicationWizardCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            oauth_client: components["schemas"]["OAuthClientWizardCreate"];
            /** Policy Types */
            policy_types: components["schemas"]["PolicyTypeWizardCreate"][];
        };
        /** ApplicationWizardRead */
        ApplicationWizardRead: {
            config: components["schemas"]["ConfigRead"];
            oauth_client: components["schemas"]["OauthClientCreateResponseWithValidator"];
        };
        /**
         * AttributeOf
         * @enum {string}
         */
        AttributeOf: "SYSTEM" | "CONTEXT" | "RESOURCE" | "ORGANIZATION" | "ORGANIZATION_UNIT" | "ORGANIZATION_USER" | "ORGANIZATION_GROUP" | "SERVICE_PROVIDER_USER";
        /**
         * AttributeSetAttributesOf
         * @enum {string}
         */
        AttributeSetAttributesOf: "ORGANIZATION" | "USER";
        /** AttributeSetCreate */
        AttributeSetCreate: {
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            type: components["schemas"]["AttributeSetAttributesOf"];
            /** Description */
            description?: string | null;
            /** Required Attribute Types */
            required_attribute_types?: string[] | null;
            /** Optional Attribute Types */
            optional_attribute_types?: string[] | null;
        };
        /** AttributeSetRead */
        AttributeSetRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            type: components["schemas"]["AttributeSetAttributesOf"];
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Description */
            description?: string | null;
        };
        /** AttributeSetUpdate */
        AttributeSetUpdate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Required Attribute Types */
            required_attribute_types?: string[] | null;
            /** Optional Attribute Types */
            optional_attribute_types?: string[] | null;
        };
        /** AttributeSetWithAttributeTypesRead */
        AttributeSetWithAttributeTypesRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            type: components["schemas"]["AttributeSetAttributesOf"];
            /** Description */
            description?: string | null;
            /** Required Attribute Types */
            required_attribute_types?: string[] | null;
            /** Optional Attribute Types */
            optional_attribute_types?: string[] | null;
        };
        /** AttributeSetWithCountsRead */
        AttributeSetWithCountsRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            type: components["schemas"]["AttributeSetAttributesOf"];
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Description */
            description?: string | null;
            /** Required Attribute Types Count */
            required_attribute_types_count: number;
            /** Optional Attribute Types Count */
            optional_attribute_types_count: number;
        };
        /**
         * AuditAction
         * @enum {string}
         */
        AuditAction: "CREATE" | "UPDATE" | "DELETE";
        /** BasicApplicationWizardCreate */
        BasicApplicationWizardCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /** BasicApplicationWizardRead */
        BasicApplicationWizardRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            type: components["schemas"]["WizardTypeRead"];
            /** Sections */
            sections: components["schemas"]["SectionRead"][];
        };
        /**
         * BillingPeriodUnit
         * @enum {string}
         */
        BillingPeriodUnit: "DAY" | "WEEK" | "MONTH" | "YEAR";
        /**
         * BillingType
         * @enum {string}
         */
        BillingType: "FREE" | "ONCE_OFF" | "FLAT_FEE_RECURRING" | "SEAT_BASED_RECURRING" | "USER_BASED_RECURRING" | "TRANSACTION_BASED_RECURRING";
        /** Body_update_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__patch */
        Body_update_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__patch: {
            legal_document_type_create?: components["schemas"]["LegalDocumentTypeCreate"] | null;
            legal_document_type_update?: components["schemas"]["LegalDocumentTypeUpdate"] | null;
        };
        /** Body_upload_legal_document_type_pdf_service_providers__service_provider_id__legal_document_types__legal_document_type_id__pdf_post */
        Body_upload_legal_document_type_pdf_service_providers__service_provider_id__legal_document_types__legal_document_type_id__pdf_post: {
            /**
             * Pdf
             * Format: binary
             * @description PDF File to Upload
             */
            pdf: string;
        };
        /**
         * ComparisonOperator
         * @enum {string}
         */
        ComparisonOperator: "GREATER_THAN" | "GREATER_THAN_OR_EQUAL" | "LESS_THAN" | "LESS_THAN_OR_EQUAL" | "EQUAL" | "NOT_EQUAL" | "ENDS_WITH" | "NOT_ENDS_WITH" | "CONTAINS" | "NOT_CONTAINS" | "BEFORE" | "AFTER";
        /** ConfigBaseRead */
        ConfigBaseRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            status: components["schemas"]["PublishStatus"];
        };
        /** ConfigChangeRead */
        ConfigChangeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            action: components["schemas"]["AuditAction"];
            /**
             * Object Id
             * Format: uuid
             */
            object_id: string;
            /** Object Name */
            object_name: string;
            /** Object Type */
            object_type: string;
            /** Object Type External */
            object_type_external: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Changed Attributes */
            changed_attributes?: Record<string, never> | null;
            /** Category */
            category?: string | null;
        };
        /** ConfigRead */
        ConfigRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            status: components["schemas"]["PublishStatus"];
            wizard?: components["schemas"]["WizardRead"] | null;
        };
        /**
         * Currency
         * @enum {string}
         */
        Currency: "EUR";
        /** EntitlementCreate */
        EntitlementCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Wizard Id */
            wizard_id?: string | null;
        };
        /** EntitlementRead */
        EntitlementRead: {
            /** Deletable */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Wizard Id */
            wizard_id?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** EntitlementUpdate */
        EntitlementUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
        /** FilterBaseRead */
        FilterBaseRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Operator */
            operator: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Service Provider Id */
            service_provider_id?: string | null;
        };
        /** FilterCreate */
        FilterCreate: {
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Operator */
            operator: string;
            /** Filter Items */
            filter_items?: components["schemas"]["FilterItem"][] | null;
            /** Filters */
            filters?: string[] | null;
            /** Wizard Id */
            wizard_id?: string | null;
        };
        /** FilterItem */
        FilterItem: {
            /** Id */
            id?: string | null;
            value_source?: components["schemas"]["AttributeOf"] | null;
            /** Value Type */
            value_type?: string | null;
            /** Value */
            value?: unknown | null;
            attribute_source?: components["schemas"]["AttributeOf"] | null;
            /** Attribute Type */
            attribute_type: string;
            operator: components["schemas"]["ComparisonOperator"];
        };
        /** FilterItemRead */
        FilterItemRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Filter Id
             * Format: uuid
             */
            filter_id: string;
            value_source?: components["schemas"]["AttributeOf"] | null;
            /** Value Type */
            value_type?: string | null;
            /** Value */
            value?: unknown | null;
            attribute_source?: components["schemas"]["AttributeOf"] | null;
            /** Attribute Type */
            attribute_type: string;
            /** Operator */
            operator: string;
        };
        /** FilterRead */
        FilterRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Operator */
            operator: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /** Filter Items */
            filter_items?: components["schemas"]["FilterItemRead"][] | null;
            /** Filters */
            filters?: components["schemas"]["NestedFilterRead"][] | null;
            /**
             * Policy Types
             * @default []
             */
            policy_types: components["schemas"]["PolicyTypeSummaryRead"][];
            /**
             * Parent Filters
             * @default []
             */
            parent_filters: components["schemas"]["NestedFilterRead"][];
        };
        /** FilterUpdate */
        FilterUpdate: {
            /** Id */
            id?: string | null;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Operator */
            operator?: string | null;
            /** Filter Items */
            filter_items?: components["schemas"]["FilterItem"][] | null;
            /** Filters */
            filters?: string[] | null;
        };
        /**
         * FormatOption
         * @enum {string}
         */
        FormatOption: "STRING" | "INTEGER" | "BOOLEAN" | "DECIMAL" | "DATETIME";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LegalDocumentTypeCreate */
        LegalDocumentTypeCreate: {
            /** Name */
            name: string;
            /** External Facing Name */
            external_facing_name?: string | null;
            /** Description */
            description?: string | null;
            text_source: components["schemas"]["TextSourceOption"];
            /** Signature Required From Sc */
            signature_required_from_SC: boolean;
            /** Signature Required From Sp */
            signature_required_from_SP: boolean;
            /** Signature Required From End User */
            signature_required_from_end_user: boolean;
            /** Version Reference */
            version_reference?: string | null;
        };
        /** LegalDocumentTypeIdAndSP */
        LegalDocumentTypeIdAndSP: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** LegalDocumentTypePdfPreSignUrl */
        LegalDocumentTypePdfPreSignUrl: {
            /** Pdf Url */
            pdf_url: string;
        };
        /** LegalDocumentTypeRead */
        LegalDocumentTypeRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Name */
            name: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Description */
            description?: string | null;
            text_source: components["schemas"]["TextSourceOption"];
            /** Signature Required From Sc */
            signature_required_from_SC: boolean;
            /** Signature Required From Sp */
            signature_required_from_SP: boolean;
            /** Signature Required From End User */
            signature_required_from_end_user: boolean;
            /** Version Reference */
            version_reference?: string | null;
            /** Finished Create */
            finished_create: boolean;
            /** Legal Documents Count */
            legal_documents_count?: number | null;
            /** Pdf Filename */
            pdf_filename?: string | null;
            /** Pdf Size */
            pdf_size?: number | null;
            /** Agreement Type Ids */
            agreement_type_ids?: string[] | null;
            /** External Facing Name */
            external_facing_name: string;
        };
        /** LegalDocumentTypeUpdate */
        LegalDocumentTypeUpdate: {
            /** Name */
            name?: string | null;
            /** External Facing Name */
            external_facing_name?: string | null;
            /** Description */
            description?: string | null;
            text_source?: components["schemas"]["TextSourceOption"] | null;
            /** Signature Required From Sc */
            signature_required_from_SC?: boolean | null;
            /** Signature Required From Sp */
            signature_required_from_SP?: boolean | null;
            /** Signature Required From End User */
            signature_required_from_end_user?: boolean | null;
            /** Version Reference */
            version_reference?: string | null;
        };
        /** LegalDocumentTypeWithPdfSyncStatusRead */
        LegalDocumentTypeWithPdfSyncStatusRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            pdf_sync_status?: components["schemas"]["SyncStatus"] | null;
        };
        /** NestedFilterRead */
        NestedFilterRead: {
            /** Parent Filter Id */
            parent_filter_id?: string | null;
            /** Child Filter Id */
            child_filter_id?: string | null;
        };
        /** OAuthClientGlobalSettingsRead */
        OAuthClientGlobalSettingsRead: {
            /** Plan Page Activated */
            plan_page_activated: boolean;
            /** Plan Page Redirect Url */
            plan_page_redirect_url?: string | null;
            /** Plan Page Data */
            plan_page_data?: Record<string, never> | null;
        };
        /** OAuthClientGlobalSettingsUpdate */
        OAuthClientGlobalSettingsUpdate: {
            /** Self Service */
            self_service?: boolean | null;
            /** Self Service Redirect Url */
            self_service_redirect_url?: boolean | null;
            /** Plan Page Activated */
            plan_page_activated?: boolean | null;
            /** Plan Page Redirect Url */
            plan_page_redirect_url?: string | null;
            /** Plan Page Data */
            plan_page_data?: Record<string, never> | null;
        };
        /**
         * OAuthClientType
         * @enum {string}
         */
        OAuthClientType: "Website" | "API";
        /** OAuthClientWizardCreate */
        OAuthClientWizardCreate: {
            /** Name */
            name: string;
            /** Redirect Uri */
            redirect_uri?: string | null;
            /** Redirect Uris */
            redirect_uris?: string[] | null;
            /** @default Website */
            type: components["schemas"]["OAuthClientType"];
            /**
             * Mfa Required
             * @default false
             */
            mfa_required: boolean;
        };
        /** OauthClientAttributeSetCreate */
        OauthClientAttributeSetCreate: {
            /** Attribute Set Ids */
            attribute_set_ids: string[];
        };
        /** OauthClientAttributeSetRead */
        OauthClientAttributeSetRead: {
            /** Attribute Set Ids */
            attribute_set_ids: string[];
        };
        /** OauthClientAttributeSetUpdate */
        OauthClientAttributeSetUpdate: {
            /** Attribute Set Ids */
            attribute_set_ids: string[];
        };
        /** OauthClientBaseRead */
        OauthClientBaseRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** OauthClientCreate */
        OauthClientCreate: {
            /** Id */
            id?: string | null;
            /** Description */
            description: string;
            /** Name */
            name: string;
            /** Grant Type */
            grant_type: string;
            /** Response Type */
            response_type: string;
            /**
             * Scopes
             * @default openid profile email
             */
            scopes: string;
            /** Redirect Uris */
            redirect_uris: string[];
            /** Organization Id */
            organization_id?: string | null;
            /** Url */
            url?: string | null;
            /** User Attribute Set Id */
            user_attribute_set_id?: string | null;
            /** Organization Attribute Set Id */
            organization_attribute_set_id?: string | null;
            /**
             * Mfa Required
             * @default false
             */
            mfa_required: boolean;
            /** Wizard Id */
            wizard_id?: string | null;
        };
        /** OauthClientCreateResponseWithValidator */
        OauthClientCreateResponseWithValidator: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            /** Wizard */
            wizard: components["schemas"]["WizardItemRead"] | null;
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Url */
            url?: string | null;
            /** Grant Type */
            grant_type: string;
            /** Response Type */
            response_type: string;
            /** Scopes */
            scopes: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Secrets */
            secrets: components["schemas"]["OauthClientSecretRead"][];
            /** Authorized Redirect Uris */
            authorized_redirect_uris?: string[] | null;
            /** Mfa Required */
            mfa_required: boolean;
            /**
             * Plan Page Activated
             * @default false
             */
            plan_page_activated: boolean;
            /** Plan Page Redirect Url */
            plan_page_redirect_url?: string | null;
            /** Plan Page Date */
            plan_page_date?: Record<string, never> | null;
            /** Client Secret */
            client_secret: string;
        };
        /** OauthClientCredentials */
        OauthClientCredentials: {
            /**
             * Client Id
             * Format: uuid
             */
            client_id: string;
            /** Client Secret */
            client_secret: string;
        };
        /** OauthClientRead */
        OauthClientRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            /** Wizard */
            wizard: components["schemas"]["WizardItemRead"] | null;
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Url */
            url?: string | null;
            /** Grant Type */
            grant_type: string;
            /** Response Type */
            response_type: string;
            /** Scopes */
            scopes: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Secrets */
            secrets: components["schemas"]["OauthClientSecretRead"][];
            /** Authorized Redirect Uris */
            authorized_redirect_uris?: string[] | null;
            /** Mfa Required */
            mfa_required: boolean;
            /**
             * Plan Page Activated
             * @default false
             */
            plan_page_activated: boolean;
            /** Plan Page Redirect Url */
            plan_page_redirect_url?: string | null;
            /** Plan Page Date */
            plan_page_date?: Record<string, never> | null;
            /** Attribute Set Ids */
            attribute_set_ids?: string[] | null;
        };
        /** OauthClientSecretCreateResponse */
        OauthClientSecretCreateResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Enabled */
            enabled: boolean;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Secret */
            secret: string;
        };
        /** OauthClientSecretRead */
        OauthClientSecretRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Enabled */
            enabled: boolean;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
        };
        /** OauthClientUpdate */
        OauthClientUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Url
             * @default
             */
            url: string | null;
            /** Grant Type */
            grant_type?: string | null;
            /** Redirect Uris */
            redirect_uris?: string[] | null;
            /** Mfa Required */
            mfa_required?: boolean | null;
            /** Plan Page Activated */
            plan_page_activated?: boolean | null;
            /** Plan Page Redirect Url */
            plan_page_redirect_url?: string | null;
            /** Plan Page Data */
            plan_page_data?: Record<string, never> | null;
        };
        /** PaginationSchema[AgreementTypePoliciesRead] */
        PaginationSchema_AgreementTypePoliciesRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["AgreementTypePoliciesRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[AttributeSetWithCountsRead] */
        PaginationSchema_AttributeSetWithCountsRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["AttributeSetWithCountsRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ConfigChangeRead] */
        PaginationSchema_ConfigChangeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ConfigChangeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[EntitlementRead] */
        PaginationSchema_EntitlementRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["EntitlementRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[FilterRead] */
        PaginationSchema_FilterRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["FilterRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[LegalDocumentTypeRead] */
        PaginationSchema_LegalDocumentTypeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["LegalDocumentTypeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[LegalDocumentTypeWithPdfSyncStatusRead] */
        PaginationSchema_LegalDocumentTypeWithPdfSyncStatusRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["LegalDocumentTypeWithPdfSyncStatusRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OauthClientBaseRead] */
        PaginationSchema_OauthClientBaseRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OauthClientBaseRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OauthClientRead] */
        PaginationSchema_OauthClientRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OauthClientRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ResourceAttributeTypeInUseRead] */
        PaginationSchema_ResourceAttributeTypeInUseRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ResourceAttributeTypeInUseRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ResourceTypeRead] */
        PaginationSchema_ResourceTypeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ResourceTypeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[RoleRead] */
        PaginationSchema_RoleRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["RoleRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[SPPolicyTypeRead] */
        PaginationSchema_SPPolicyTypeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["SPPolicyTypeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[SectionTypeRead] */
        PaginationSchema_SectionTypeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["SectionTypeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[WizardTypeRead] */
        PaginationSchema_WizardTypeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["WizardTypeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /**
         * PolicyOutcome
         * @enum {string}
         */
        PolicyOutcome: "ALLOW" | "DENY" | "AUDIT" | "INCONCLUSIVE" | "ROLE";
        /** PolicyTypeChildPolicyTypeRead */
        PolicyTypeChildPolicyTypeRead: {
            /**
             * Policy Type Id
             * Format: uuid
             */
            policy_type_id: string;
            /**
             * Child Policy Type Id
             * Format: uuid
             */
            child_policy_type_id: string;
        };
        /** PolicyTypeChildPolicyTypeUpdate */
        PolicyTypeChildPolicyTypeUpdate: {
            /**
             * Child Policy Type Id
             * Format: uuid
             */
            child_policy_type_id: string;
        };
        /** PolicyTypeCreate */
        PolicyTypeCreate: {
            /** Name */
            name?: string | null;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Description */
            description?: string | null;
            outcome: components["schemas"]["PolicyOutcome"];
            /** Return Value */
            return_value?: string | null;
            /** Audit Level */
            audit_level?: string | null;
            /** Troubleshoot */
            troubleshoot?: boolean | null;
            /** Troubleshoot End */
            troubleshoot_end?: string | null;
            /** Filters */
            filters?: string[] | null;
            /** Child Policy Types */
            child_policy_types?: string[] | null;
            /** Wizard Id */
            wizard_id?: string | null;
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description: string | null;
        };
        /** PolicyTypeEntitlementCreate */
        PolicyTypeEntitlementCreate: {
            /** Entitlement Ids */
            entitlement_ids: string[];
        };
        /** PolicyTypeEntitlementRead */
        PolicyTypeEntitlementRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Entitlement Id
             * Format: uuid
             */
            entitlement_id: string;
        };
        /** PolicyTypeEntitlementsRead */
        PolicyTypeEntitlementsRead: {
            /** Entitlements */
            entitlements: components["schemas"]["PolicyTypeEntitlementRead"][];
        };
        /** PolicyTypeFilterCreate */
        PolicyTypeFilterCreate: {
            /**
             * Filter Id
             * Format: uuid
             */
            filter_id: string;
        };
        /** PolicyTypeRead */
        PolicyTypeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Published */
            published: boolean;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            outcome: components["schemas"]["PolicyOutcome"];
            /** Return Value */
            return_value?: string | null;
            /** Audit Level */
            audit_level?: string | null;
            /** Troubleshoot */
            troubleshoot: boolean;
            /** Troubleshoot End */
            troubleshoot_end?: string | null;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Filters */
            filters?: string[] | null;
            /** Child Policy Types */
            child_policy_types?: string[] | null;
            /** Used In Agreement Type */
            used_in_agreement_type?: boolean | null;
        };
        /** PolicyTypeRoleCreate */
        PolicyTypeRoleCreate: {
            /** Role Ids */
            role_ids: string[];
        };
        /** PolicyTypeRoleRead */
        PolicyTypeRoleRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
        };
        /** PolicyTypeRoleUpdate */
        PolicyTypeRoleUpdate: {
            /** Role Ids */
            role_ids: string[];
        };
        /** PolicyTypeRolesRead */
        PolicyTypeRolesRead: {
            /** Roles */
            roles: components["schemas"]["PolicyTypeRoleRead"][];
        };
        /** PolicyTypeSummaryRead */
        PolicyTypeSummaryRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
        };
        /** PolicyTypeUpdate */
        PolicyTypeUpdate: {
            /** Name */
            name?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /** Category Id */
            category_id?: string | null;
            /** Description */
            description?: string | null;
            outcome?: components["schemas"]["PolicyOutcome"] | null;
            /** Return Value */
            return_value?: string | null;
            /** Audit Level */
            audit_level?: string | null;
            /** Troubleshoot */
            troubleshoot?: boolean | null;
            /** Troubleshoot End */
            troubleshoot_end?: string | null;
            /** Filters */
            filters?: string[] | null;
            /** Child Policy Types */
            child_policy_types?: string[] | null;
            /** External Facing Name */
            external_facing_name?: string | null;
            /** External Facing Description */
            external_facing_description?: string | null;
        };
        /** PolicyTypeWizardCreate */
        PolicyTypeWizardCreate: {
            /** Name */
            name: string;
            /** Entitlements */
            entitlements?: string[] | null;
        };
        /** PriceRead */
        PriceRead: {
            /** Amount */
            amount: number;
            currency: components["schemas"]["Currency"];
            /** Description */
            description?: string | null;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
            billing_type?: components["schemas"]["BillingType"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** PriceUpdate */
        PriceUpdate: {
            /** Amount */
            amount: number;
            currency: components["schemas"]["Currency"];
            /** Description */
            description?: string | null;
            billing_type?: components["schemas"]["BillingType"] | null;
        };
        /**
         * PublishStatus
         * @enum {string}
         */
        PublishStatus: "DRAFT" | "FAILED" | "PUBLISHED" | "PUBLISHING" | "DELETING" | "DISCARDED";
        /** ResourceAttributeTypeCreate */
        ResourceAttributeTypeCreate: {
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            format_option: components["schemas"]["FormatOption"];
        };
        /** ResourceAttributeTypeInUseRead */
        ResourceAttributeTypeInUseRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            format_option: components["schemas"]["FormatOption"];
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** In Use */
            in_use: boolean;
        };
        /** ResourceAttributeTypeListCreate */
        ResourceAttributeTypeListCreate: {
            /** Resource Attribute Types */
            resource_attribute_types: components["schemas"]["ResourceAttributeTypeCreate"][];
        };
        /** ResourceAttributeTypeRead */
        ResourceAttributeTypeRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            format_option: components["schemas"]["FormatOption"];
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
        };
        /** ResourceAttributeTypeUpdate */
        ResourceAttributeTypeUpdate: {
            /** Name */
            name?: string | null;
            format_option?: components["schemas"]["FormatOption"] | null;
        };
        /** ResourceTypeCreate */
        ResourceTypeCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Resource Attribute Types */
            resource_attribute_types?: string[] | null;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** ResourceTypeExtendedRead */
        ResourceTypeExtendedRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Description */
            description?: string | null;
            /** Number Of Attributes */
            number_of_attributes?: number | null;
            /** Resource Attribute Types */
            resource_attribute_types?: string[] | null;
        };
        /** ResourceTypeRead */
        ResourceTypeRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Description */
            description?: string | null;
            /** Number Of Attributes */
            number_of_attributes?: number | null;
        };
        /** ResourceTypeUpdate */
        ResourceTypeUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Resource Attribute Types */
            resource_attribute_types?: string[] | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
        };
        /** RoleCreate */
        RoleCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Wizard Id */
            wizard_id?: string | null;
        };
        /** RoleRead */
        RoleRead: {
            /** Deletable */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Wizard Id */
            wizard_id?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** RoleUpdate */
        RoleUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
        /** SPAgreementTypeRead */
        SPAgreementTypeRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description?: string | null;
            /** Name */
            name: string | null;
            /** Description */
            description?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /**
             * Marketing Features
             * @default []
             */
            marketing_features: string[];
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            billing_type: components["schemas"]["BillingType"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Agreements Count */
            agreements_count: number;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Published */
            published: boolean;
            /** Billing Period Length */
            billing_period_length: number | null;
            billing_period_unit: components["schemas"]["BillingPeriodUnit"] | null;
            price?: components["schemas"]["PriceRead"] | null;
            /**
             * Prices
             * @default []
             */
            prices: components["schemas"]["PriceRead"][];
        };
        /** SPPolicyTypeRead */
        SPPolicyTypeRead: {
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /**
             * Used
             * @default false
             */
            used: boolean;
            /**
             * Referenced
             * @default false
             */
            referenced: boolean;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
            wizard?: components["schemas"]["WizardItemRead"] | null;
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Published */
            published: boolean;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            outcome: components["schemas"]["PolicyOutcome"];
            /** Return Value */
            return_value?: string | null;
            /** Audit Level */
            audit_level?: string | null;
            /** Troubleshoot */
            troubleshoot: boolean;
            /** Troubleshoot End */
            troubleshoot_end?: string | null;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Filters */
            filters?: string[] | null;
            /** Child Policy Types */
            child_policy_types?: string[] | null;
            /** Used In Agreement Type */
            used_in_agreement_type?: boolean | null;
            /** Has Child Or Parent Policy Types */
            has_child_or_parent_policy_types?: boolean | null;
        };
        /** SectionRead */
        SectionRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            type: components["schemas"]["SectionTypeRead"];
            status: components["schemas"]["SectionStatus"];
            sync_status?: components["schemas"]["SyncStatus"] | null;
            publish_status?: components["schemas"]["SyncStatus"] | null;
        };
        /** SectionReadWithData */
        SectionReadWithData: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            type: components["schemas"]["SectionTypeRead"];
            status: components["schemas"]["SectionStatus"];
            sync_status?: components["schemas"]["SyncStatus"] | null;
            publish_status?: components["schemas"]["SyncStatus"] | null;
            /** Data */
            data?: Record<string, never> | null;
        };
        /**
         * SectionStatus
         * @enum {string}
         */
        SectionStatus: "NEW" | "DRAFT" | "ONLINE";
        /** SectionStatusRead */
        SectionStatusRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            status: components["schemas"]["SectionStatus"];
            sync_status?: components["schemas"]["SyncStatus"] | null;
            publish_status?: components["schemas"]["SyncStatus"] | null;
        };
        /** SectionTypeExtendedRead */
        SectionTypeExtendedRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Sections Count */
            sections_count: number;
        };
        /** SectionTypeRead */
        SectionTypeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** SectionUpdate */
        SectionUpdate: {
            /** Data */
            data: Record<string, never>;
        };
        /** ServiceProviderConfigRead */
        ServiceProviderConfigRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            config?: components["schemas"]["ConfigRead"] | null;
            /** Wizard Configs */
            wizard_configs?: components["schemas"]["ConfigRead"][] | null;
        };
        /**
         * SyncStatus
         * @enum {string}
         */
        SyncStatus: "PENDING" | "SUCCESS" | "FAILURE";
        /**
         * TextSourceOption
         * @enum {string}
         */
        TextSourceOption: "pdf" | "url" | "text";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WizardCreate */
        WizardCreate: {
            /**
             * Wizard Type Id
             * Format: uuid
             */
            wizard_type_id: string;
            /** Name */
            name: string;
        };
        /** WizardItemRead */
        WizardItemRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /**
             * Locked
             * @default false
             */
            locked: boolean;
            /**
             * Hidden
             * @default false
             */
            hidden: boolean;
            /**
             * Isolated
             * @default false
             */
            isolated: boolean;
        };
        /** WizardRead */
        WizardRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
        };
        /** WizardReadWithConfig */
        WizardReadWithConfig: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            type: components["schemas"]["WizardTypeReadBase"];
            config?: components["schemas"]["ConfigBaseRead"] | null;
        };
        /** WizardReadWithSections */
        WizardReadWithSections: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            type: components["schemas"]["WizardTypeRead"];
            /** Sections */
            sections: components["schemas"]["SectionRead"][];
            config?: components["schemas"]["ConfigBaseRead"] | null;
        };
        /** WizardStatusRead */
        WizardStatusRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            status: components["schemas"]["SectionStatus"];
            sync_status: components["schemas"]["SyncStatus"];
            publish_status: components["schemas"]["PublishStatus"];
        };
        /** WizardTypeExtendedRead */
        WizardTypeExtendedRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Wizards Count */
            wizards_count: number;
        };
        /** WizardTypeRead */
        WizardTypeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
        };
        /** WizardTypeReadBase */
        WizardTypeReadBase: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** WizardUpdate */
        WizardUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    agreement_types_read_service_providers__service_provider_id__agreement_types_get: {
        parameters: {
            query?: {
                /** @description Agreement Type IDs to return */
                agreement_type_ids?: string[];
                /** @description Agreement Types Offset */
                offset?: number;
                /** @description Max number of Agreement Types */
                limit?: number;
                /** @description Disable pagination */
                disable_pagination?: boolean | null;
                /** @description A search query is used to search agreement type using (name, description, ) */
                query?: string | null;
                /** @description Filter by include_in_self_service */
                include_in_self_service?: boolean | null;
                /** @description Filter by category */
                category?: components["schemas"]["AgreementTypeCategory"] | null;
                /** @description Attribute used to sort the Agreement Type: ['agreement_type.service_provider_id', 'agreement_type.distribution_allowed_organization', 'agreement_type.include_in_self_service', 'agreement_type.self_service_order', 'agreement_type.name', 'agreement_type.created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Types Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_AgreementTypePoliciesRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_types_create_service_providers__service_provider_id__agreement_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementTypeCreate"];
            };
        };
        responses: {
            /** @description Agreement Type Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPAgreementTypeRead"];
                };
            };
            /** @description Missing or Invalid Policy Types */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    agreement_type_read_service_providers__service_provider_id__agreement_types__agreement_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Type Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementTypePoliciesRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_type_delete_service_providers__service_provider_id__agreement_types__agreement_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Type Removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Type in Use */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    agreement_type_edit_service_providers__service_provider_id__agreement_types__agreement_type_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementTypeUpdate"];
            };
        };
        responses: {
            /** @description Agreement Type Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementTypePoliciesRead"];
                };
            };
            /** @description Missing or Invalid Policy Types */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_policy_types_of_agreement_type_service_providers__service_provider_id__agreement_types__agreement_type_id__policy_types_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementTypePolicyTypeUpdate"];
            };
        };
        responses: {
            /** @description Policy Types of Agreement Type Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementTypePolicyTypeRead"];
                };
            };
            /** @description Missing or Invalid Policy Types */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    remove_policy_type_from_agreement_type_service_providers__service_provider_id__agreement_types__agreement_type_id__policy_types__policy_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy Type Removed from Agreement Type */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_legal_document_types_for_agreement_type_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of Legal Document Types */
                limit?: number;
                /** @description A search query is used to search legal document types using (name, description) */
                query?: string | null;
                /** @description Attribute used to sort the Legal Document Types: ['finished_create', 'text_source', 'name', 'signature_required_from_SC', 'signature_required_from_SP', 'signature_required_from_end_user', 'service_provider_id', 'version_reference', 'pdf_sync_status', 'pdf_filename', 'pdf_size'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Legal Document Types for Agreement Type */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_LegalDocumentTypeWithPdfSyncStatusRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Types for Agreement Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_agreement_type_to_legal_document_types_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementTypeToLegalDocumentTypeUpdate"];
            };
        };
        responses: {
            /** @description Agreement Type to Legal Document Type Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Type or Legal Document Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_agreement_type_to_legal_document_types_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementTypeToLegalDocumentTypeUpdate"];
            };
        };
        responses: {
            /** @description Agreement Type to Legal Document Type Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementTypeLegalDocumentTypeRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Type to Legal Document Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_agreement_type_to_legal_document_types_service_providers__service_provider_id__agreement_types__agreement_type_id__legal_document_types__legal_document_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
                /** @description ID of the Legal Document Type */
                legal_document_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Type to Legal Document Type Removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Type or Legal Document Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_attribute_sets_service_providers__service_provider_id__attribute_sets_get: {
        parameters: {
            query?: {
                /** @description ID of the OAuth Client */
                oauth_client_id?: string | null;
                /** @description Attribute of filter for Attribute Sets */
                attribute_of?: components["schemas"]["AttributeSetAttributesOf"] | null;
                /** @description Service Provider Attribute Sets Offset */
                offset?: number;
                /** @description Max number of Service Provider Attribute Sets */
                limit?: number;
                /** @description Term to search for in the Attribute Sets */
                query?: string | null;
                /** @description Attributes used to sort the Attribute sets: ['created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute Set Successfully returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_AttributeSetWithCountsRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    attribute_sets_create_service_providers__service_provider_id__attribute_sets_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttributeSetCreate"];
            };
        };
        responses: {
            /** @description Attribute Set Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeSetRead"];
                };
            };
            /** @description Missing or Invalid Attribute Types */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate - Attribute Type exists with this name for this Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    attribute_set_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Attribute Set */
                attribute_set_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute Set Read */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeSetWithAttributeTypesRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Attribute Set */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    attribute_set_delete_service_providers__service_provider_id__attribute_sets__attribute_set_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Attribute Set */
                attribute_set_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute Set Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Attribute Set associated with OAuth Client */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Attribute Set */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    attribute_set_edit_service_providers__service_provider_id__attribute_sets__attribute_set_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Attribute Set */
                attribute_set_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttributeSetUpdate"];
            };
        };
        responses: {
            /** @description Attribute Set Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttributeSetRead"];
                };
            };
            /** @description Missing or Invalid Attribute Types */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Attribute Set not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate - Attribute Type exists with this name for this Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    attribute_set_usage_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__usage_get: {
        parameters: {
            query?: {
                /** @description Related OAuth Clients Offset */
                offset?: number;
                /** @description Max number of Related OAuth Clients */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Attribute Set */
                attribute_set_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute Set Usage Successfully read */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OauthClientBaseRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Attribute Set */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    config_read_service_providers__service_provider_id__configs__config_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Config */
                config_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Config Read */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Config Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    config_delete_service_providers__service_provider_id__configs__config_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Config */
                config_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Config Marked as Deleting and Config Delete Task called */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Config has status PUBLISHED or PUBLISHING */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Config Not Found or Config belongs to another Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    config_publish_service_providers__service_provider_id__configs__config_id__publish_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Config */
                config_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Config Published */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigRead"];
                };
            };
            /** @description Config already has status PUBLISHED or PUBLISHING */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Config Not Found or Config belongs to another Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    config_change_read_service_providers__service_provider_id__configs__config_id__changes_get: {
        parameters: {
            query?: {
                /** @description Config changes Offset */
                offset?: number;
                /** @description Max number of Config changes */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Config */
                config_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Config changes Read */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ConfigChangeRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Config Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_entitlements_service_providers__service_provider_id__entitlements_get: {
        parameters: {
            query?: {
                /** @description Entitlements Offset */
                offset?: number;
                /** @description Max number of Entitlements */
                limit?: number;
                /** @description Term to search for in the Entitlements */
                query?: string | null;
                /** @description Attribute used to sort the Entitlements: ['name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_EntitlementRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_entitlement_service_providers__service_provider_id__entitlements_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitlementCreate"];
            };
        };
        responses: {
            /** @description Entitlement Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntitlementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing Entitlement with same Name in the Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Entitlement */
                entitlement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntitlementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Entitlement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Entitlement */
                entitlement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Entitlement deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Entitlement is being Used in a Policy Type */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Entitlement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Entitlement */
                entitlement_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntitlementUpdate"];
            };
        };
        responses: {
            /** @description Entitlement Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntitlementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Entitlement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing Entitlement with same Name in the Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_entitlements_read_service_providers__service_provider_id__policy_types__policy_type_id__entitlements_get: {
        parameters: {
            query?: {
                /** @description Policy Type Entitlements Offset */
                offset?: number;
                /** @description Max number of Policy Type Entitlements */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeEntitlementsRead"];
                };
            };
            /** @description Policy Type Entitlements Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_entitlements_create_service_providers__service_provider_id__policy_types__policy_type_id__entitlements_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTypeEntitlementCreate"];
            };
        };
        responses: {
            /** @description Policy Type Entitlements Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeEntitlementsRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type, or Policy Type for Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type and Entitlement Association exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_entitlement_delete_service_providers__service_provider_id__policy_types__policy_type_id__entitlements__entitlement_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
                /** @description ID of the Policy Type Entitlement */
                entitlement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy Type Entitlement Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type or Policy Type Belongs to another SP or Policy Type Entitlement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_filters_by_service_provider_service_providers__service_provider_id__filters_get: {
        parameters: {
            query?: {
                /** @description Filters Offset */
                offset?: number;
                /** @description Max number of Filters */
                limit?: number;
                /** @description A search query is used to search filters using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Filters: ['service_provider_id', 'name', 'operator', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filters Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_FilterRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    filters_create_service_providers__service_provider_id__filters_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilterCreate"];
            };
        };
        responses: {
            /** @description Filter Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilterRead"];
                };
            };
            /** @description Missing or Invalid Child Filters or Sources */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Filter with same name in the same Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filter_read_service_providers__service_provider_id__filters__filter_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Filter */
                filter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filter Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilterRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Filter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    filter_delete_service_providers__service_provider_id__filters__filter_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Filter */
                filter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filter Removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Filter in Use */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Filter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    filter_edit_service_providers__service_provider_id__filters__filter_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Filter */
                filter_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilterUpdate"];
            };
        };
        responses: {
            /** @description Filter Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Filter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Filter with same name in the same Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_types_read_service_providers__service_provider_id__policy_types_get: {
        parameters: {
            query?: {
                /** @description ID of the Category which is associated with the Policy Types */
                category_id?: string | null;
                /** @description ID of a Policy Type to be excluded from the results */
                exclude_id?: string | null;
                /** @description ID of the Category which is NOT associated with the Policy Types */
                exclude_category_id?: string | null;
                /** @description Policy Types Offset */
                offset?: number;
                /** @description Max number of Policy Types */
                limit?: number;
                /** @description A search query is used to search policy types using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policy Types: ['service_provider_id', 'category_id', 'name', 'outcome', 'audit_level', 'troubleshoot', 'troubleshoot_end', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SPPolicyTypeRead_"];
                };
            };
            /** @description Policy Types Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_types_create_service_providers__service_provider_id__policy_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTypeCreate"];
            };
        };
        responses: {
            /** @description Policy Type Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPPolicyTypeRead"];
                };
            };
            /** @description Missing or Invalid Filters or Categories, or Policy Type with Name exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_read_service_providers__service_provider_id__policy_types__policy_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPPolicyTypeRead"];
                };
            };
            /** @description Policy Type Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_delete_service_providers__service_provider_id__policy_types__policy_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy Type Removed */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type in Use */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_edit_service_providers__service_provider_id__policy_types__policy_type_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTypeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPPolicyTypeRead"];
                };
            };
            /** @description Policy Type Updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing or Invalid Filters or Categories */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_child_policy_types_read_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types_get: {
        parameters: {
            query?: {
                /** @description Policy Types Offset */
                offset?: number;
                /** @description Max number of Policy Types */
                limit?: number;
                /** @description A search query is used to search policy types using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policy Types: ['policy_type.name', 'policy_type.outcome', 'policy_type.audit_level', 'policy_type.troubleshoot', 'policy_type.troubleshoot_end', 'policy_type.service_provider_id', 'policy_type.category_id'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SPPolicyTypeRead_"];
                };
            };
            /** @description Policy Type Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_child_policy_types_update_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTypeChildPolicyTypeUpdate"];
            };
        };
        responses: {
            /** @description Child Policy Types Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeChildPolicyTypeRead"];
                };
            };
            /** @description Child Policy Types Loop */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type or Child Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_child_policy_types_delete_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types__child_policy_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
                /** @description ID of the Child Policy Type */
                child_policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Child Policy Type Removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type or Child Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_filters_read_service_providers__service_provider_id__policy_types__policy_type_id__filters_get: {
        parameters: {
            query?: {
                /** @description Filter Offset */
                offset?: number;
                /** @description Max number of Filters */
                limit?: number;
                /** @description A search query is used to search filters using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Filters: ['filter.service_provider_id', 'filter.operator', 'filter.name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_FilterRead_"];
                };
            };
            /** @description Policy Type Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_filter_to_policy_type_service_providers__service_provider_id__policy_types__policy_type_id__filters_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTypeFilterCreate"];
            };
        };
        responses: {
            /** @description Filter Added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilterBaseRead"];
                };
            };
            /** @description Invalid Filter or Policy Type */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type or Filter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Filter Already Added to Policy */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_filter_from_policy_type_service_providers__service_provider_id__policy_types__policy_type_id__filters__filter_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
                /** @description ID of the Filter */
                filter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filter Removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type or Filter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_types_roles_read_service_providers__service_provider_id__policy_types__policy_type_id__roles_get: {
        parameters: {
            query?: {
                /** @description Policy Type Roles Offset */
                offset?: number;
                /** @description Max number of Policy Type Roles */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeRolesRead"];
                };
            };
            /** @description Policy Type Roles Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_types_role_update_service_providers__service_provider_id__policy_types__policy_type_id__roles_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTypeRoleUpdate"];
            };
        };
        responses: {
            /** @description Policy Type Role Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeRolesRead"];
                };
            };
            /** @description Invalid Role(s) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type, or Policy Type for Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_types_role_create_service_providers__service_provider_id__policy_types__policy_type_id__roles_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTypeRoleCreate"];
            };
        };
        responses: {
            /** @description Policy Type Role Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeRolesRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type, or Policy Type for Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Role with Role exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_type_role_delete_service_providers__service_provider_id__policy_types__policy_type_id__roles__role_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
                /** @description ID of the Policy Type Role */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy Type Roles Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_legal_document_types_service_providers__service_provider_id__legal_document_types_get: {
        parameters: {
            query?: {
                /** @description Legal Document Types Offset */
                offset?: number;
                /** @description Max number of Legal Document Types */
                limit?: number;
                /** @description Search in Legal Document Types using fields (name, ) */
                query?: string | null;
                /** @description Attribute used to sort the Legal Document Types: ['name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Legal Document Types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_LegalDocumentTypeRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_legal_document_type_service_providers__service_provider_id__legal_document_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Legal Document Type Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentTypeIdAndSP"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Legal Document Type */
                legal_document_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Legal Document Type */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentTypeRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Legal Document Type */
                legal_document_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Legal Document Type Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type has Legal Document */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Legal Document Type */
                legal_document_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_update_legal_document_type_service_providers__service_provider_id__legal_document_types__legal_document_type_id__patch"];
            };
        };
        responses: {
            /** @description Legal Document Type Finished Create or Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentTypeRead"];
                };
            };
            /** @description Invalid initial_setup flag or Legal Document Type has Legal Document */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type with the same name already exists for this Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_legal_document_type_pdf_url_service_providers__service_provider_id__legal_document_types__legal_document_type_id__pdf_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Legal Document Type */
                legal_document_type_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Legal Document Type PDF Pre Signed URL retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentTypePdfPreSignUrl"];
                };
            };
            /** @description Invalid Text Source or PDF Sync Status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type Not Found for Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description AWS S3 Service Exception */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upload_legal_document_type_pdf_service_providers__service_provider_id__legal_document_types__legal_document_type_id__pdf_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Legal Document Type */
                legal_document_type_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_legal_document_type_pdf_service_providers__service_provider_id__legal_document_types__legal_document_type_id__pdf_post"];
            };
        };
        responses: {
            /** @description Legal Document Type PDF Uploaded */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid File Type, Text Source or Size */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type Not Found for Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Legal Document Type PDF Upload Already in Progress */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description AWS S3 Service Exception */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of agreements */
                limit?: number;
                /** @description A search query is used to search resource attribute types using (name, ) */
                query?: string | null;
                /** @description Filter by in use resource attribute type */
                in_use?: boolean | null;
                /** @description Format options */
                format_option?: components["schemas"]["FormatOption"] | null;
                /** @description Attribute used to sort the Resource attribute types: ['service_provider_id', 'name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description Service provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Attribute Types Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ResourceAttributeTypeInUseRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceAttributeTypeListCreate"];
            };
        };
        responses: {
            /** @description Resource Attribute Type Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeTypeInUseRead"][];
                };
            };
            /** @description Forbidden characters in name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - Duplicate name with Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_resource_attribute_type_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service provider ID */
                service_provider_id: string;
                /** @description Resource attribute type ID */
                resource_attribute_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Attribute Type retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeTypeInUseRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Attribute Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_attribute_type_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Resource Attribute Type */
                resource_attribute_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Attribute Type Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Attribute Type assigned to Resource Type */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Attribute Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service provider ID */
                service_provider_id: string;
                /** @description Resource attribute type ID */
                resource_attribute_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceAttributeTypeUpdate"];
            };
        };
        responses: {
            /** @description Resource Attribute Type Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeTypeRead"];
                };
            };
            /** @description Forbidden characters in name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Attribute Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resource_types_read_service_providers__service_provider_id__resource_types_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of agreements */
                limit?: number;
                /** @description A search query is used to search resource types using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Resource Types: ['service_provider_id', 'name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Type Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ResourceTypeRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resource_types_create_service_providers__service_provider_id__resource_types_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceTypeCreate"];
            };
        };
        responses: {
            /** @description Resource Type created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceTypeExtendedRead"];
                };
            };
            /** @description Forbidden characters in name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Attribute Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Type with the same name in the same Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_resource_type_service_providers__service_provider_id__resource_types__resource_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Resource Type */
                resource_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Type Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceTypeExtendedRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resource_type_delete_service_providers__service_provider_id__resource_types__resource_type_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Resource Type */
                resource_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Type Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resource_type_edit_service_providers__service_provider_id__resource_types__resource_type_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Resource Type */
                resource_type_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceTypeUpdate"];
            };
        };
        responses: {
            /** @description Resource Type Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceTypeExtendedRead"];
                };
            };
            /** @description Forbidden characters in name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Type with the same name in the same Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    roles_read_service_providers__service_provider_id__roles_get: {
        parameters: {
            query?: {
                /** @description Term to search for in the Roles */
                query?: string | null;
                /** @description Roles Offset */
                offset?: number;
                /** @description Max number of Roles */
                limit?: number;
                /** @description Attribute used to sort the Roles: ['name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Roles Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_RoleRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    roles_create_service_providers__service_provider_id__roles_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            /** @description Role created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Role with same name for the Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Role Name */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    role_read_service_providers__service_provider_id__roles__role_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Role */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Role Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Role Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    role_delete_service_providers__service_provider_id__roles__role_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Role */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Role Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Role Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    roles_update_service_providers__service_provider_id__roles__role_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Role */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleUpdate"];
            };
        };
        responses: {
            /** @description Service Provider Role Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Role Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Role with same name for the Service Provider exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Role Name */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_clients_read_service_providers__service_provider_id__oauth_clients_get: {
        parameters: {
            query?: {
                /** @description OAuth Clients Offset */
                offset?: number;
                /** @description Max number of OAuth Clients */
                limit?: number;
                /** @description Term to search for in the OAuth Clients */
                query?: string | null;
                /** @description Exact match for the Name of the OAuth Client */
                name?: string | null;
                /** @description Attribute used to sort the OAuth Clients: ['name', 'url', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Clients Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OauthClientRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_clients_create_service_providers__service_provider_id__oauth_clients_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OauthClientCreate"];
            };
        };
        responses: {
            /** @description OAuth Client Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientCreateResponseWithValidator"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Oauth Client Exists For Service Provider And Same Name */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_read_service_providers__service_provider_id__oauth_clients__oauth_client_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_client_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_edit_service_providers__service_provider_id__oauth_clients__oauth_client_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OauthClientUpdate"];
            };
        };
        responses: {
            /** @description OAuth Client Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_secret_edit_service_providers__service_provider_id__oauth_clients__oauth_client_id__secret_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Secret Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientCredentials"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_secret_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__secrets__oauth_client_secret_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
                /** @description ID of the OAuth Client Secret */
                oauth_client_secret_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Secret Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Secret is the last of OAuth Client, Can not be deleted */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or OAuth Client or OAuth Client Secret */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_secret_create_service_providers__service_provider_id__oauth_clients__oauth_client_id__secrets_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Secret Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientSecretCreateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_attribute_sets_update_service_providers__service_provider_id__oauth_clients__oauth_client_id__attribute_sets_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OauthClientAttributeSetUpdate"];
            };
        };
        responses: {
            /** @description OAuth Client Attribute Sets Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientAttributeSetRead"];
                };
            };
            /** @description Missing Attribute set or Belongs to Another SP */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_attribute_sets_create_service_providers__service_provider_id__oauth_clients__oauth_client_id__attribute_sets_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OauthClientAttributeSetCreate"];
            };
        };
        responses: {
            /** @description OAuth Client Attribute Sets Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientAttributeSetRead"];
                };
            };
            /** @description Missing Attribute set or Belongs to Another SP */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description OAuth Client Attribute Set exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oauth_client_attribute_sets_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__attribute_sets__attribute_set_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
                /** @description ID of the Attribute Set */
                attribute_set_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Attribute Set Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description OAuth Client Attribute Set Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Configuration Lifecycle record exists with status PUBLISHING or FAILED */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    service_provider_read_service_providers__service_provider_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderConfigRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_client_get_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthClientGlobalSettingsRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No OAuth Clients */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_client_update_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthClientGlobalSettingsUpdate"];
            };
        };
        responses: {
            /** @description OAuth Client Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthClientGlobalSettingsRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No OAuth Clients */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wizards_create_service_providers__service_provider_id__wizards_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WizardCreate"];
            };
        };
        responses: {
            /** @description Wizard Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WizardReadWithSections"];
                };
            };
            /** @description Missing Wizard Type */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate Wizard Name */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Missing Wizard Class */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    wizard_read_service_providers__service_provider_id__wizards__wizard_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Wizard */
                wizard_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wizard Returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WizardReadWithSections"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Wizard or Wizard does not belong to the Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wizard_deletion_service_providers__service_provider_id__wizards__wizard_id__delete: {
        parameters: {
            query?: {
                /** @description Disconnect Items from Wizard instead of deleting them */
                disconnect?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Wizard */
                wizard_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wizard Delete task dispatched */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Wizard Items have dependencies that make them undeletable */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Wizard, or Wizard does not belong to the Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Config Exists with status PUBLISHING for Service Provider */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    wizard_edit_service_providers__service_provider_id__wizards__wizard_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Wizard */
                wizard_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WizardUpdate"];
            };
        };
        responses: {
            /** @description Wizard Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WizardReadWithConfig"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Wizard, or Wizard does not belong to the Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate Wizard Name in Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wizard_publish_service_providers__service_provider_id__wizards__wizard_id__publish_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Wizard */
                wizard_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wizard Publishing */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WizardReadWithConfig"];
                };
            };
            /** @description Wizard has sections that are not Synced */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Wizard or Wizard does not belong to the Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Config Exists with status PUBLISHING for Service Provider */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    application_wizard_create_service_providers__service_provider_id__wizards_application_wizard_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationWizardCreate"];
            };
        };
        responses: {
            /** @description Application Role Based Configuration Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationWizardRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate Application Name or Policy Type Name */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Config Exists with status PUBLISHING */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    basic_application_wizard_create_service_providers__service_provider_id__wizards_basic_application_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BasicApplicationWizardCreate"];
            };
        };
        responses: {
            /** @description Basic Application Wizard Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BasicApplicationWizardRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate Wizard Name in Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wizard_status_read_service_providers__service_provider_id__wizards__wizard_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Wizard */
                wizard_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wizard Status Returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WizardStatusRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Wizard or Wizard does not belong to the Service Provider or there is no Config associated with the Wizard */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wizard_types_read_wizard_types_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of Wizard Types */
                limit?: number;
                /** @description A search query is used to search Wizard Types using name */
                query?: string | null;
                /** @description Attribute used to sort the Wizard Types: ['name'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_WizardTypeRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wizard_type_read_wizard_types__wizard_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Wizard Type */
                wizard_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WizardTypeExtendedRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Wizard Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    section_read_service_providers__service_provider_id__sections__section_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Section */
                section_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Section Read */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionReadWithData"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Section Not Found, or Section associated with a Wizard of a different Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    section_edit_service_providers__service_provider_id__sections__section_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Section */
                section_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SectionUpdate"];
            };
        };
        responses: {
            /** @description Section Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionReadWithData"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Missing Section or Section not associated with SP */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    section_status_read_service_providers__service_provider_id__sections__section_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Section */
                section_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Section Status Returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionStatusRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Missing Section or Section not associated with SP */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    section_types_read_section_types_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of Section Types */
                limit?: number;
                /** @description A search query is used to search Section Types using name */
                query?: string | null;
                /** @description Attribute used to sort the Section Types: ['name'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SectionTypeRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    section_type_read_section_types__section_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Section Type */
                section_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionTypeExtendedRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Section Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    load_data_load__dataset_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unload_e2e_unload_e2e_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
