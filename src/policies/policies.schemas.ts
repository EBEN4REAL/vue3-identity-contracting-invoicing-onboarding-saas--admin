/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an Agreement Type of a Service Provider */
        get: operations["agreement_type_read_service_providers__service_provider_id__agreement_types__agreement_type_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}/policy-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Policy Types of an Agreement Type for a Service Provider */
        get: operations["agreement_type_policy_types_read_service_providers__service_provider_id__agreement_types__agreement_type_id__policy_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Agreement Types of a Service Provider */
        get: operations["agreement_types_read_service_providers__service_provider_id__agreement_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}/assign/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign an Agreement Type to an Organization */
        post: operations["assign_agreement_type_to_organization_service_providers__service_provider_id__agreement_types__agreement_type_id__assign__organization_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}/assigned-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organizations assigned this Agreement Type */
        get: operations["agreement_types_assigned_organizations_read_service_providers__service_provider_id__agreement_types__agreement_type_id__assigned_organizations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Agreements of a Service Provider */
        get: operations["service_provider_agreements_read_service_providers__service_provider_id__agreements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreements/{agreement_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an Agreement of a Service Provider */
        get: operations["service_provider_agreement_read_service_providers__service_provider_id__agreements__agreement_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreements/{agreement_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancels an Agreement of a Service Provider */
        post: operations["service_provider_agreement_cancel_service_providers__service_provider_id__agreements__agreement_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreements/{agreement_id}/organization-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Users which have been Assigned an Agreement of a Service Provider */
        get: operations["get_org_users_assigned_agreement_policies_service_providers__service_provider_id__agreements__agreement_id__organization_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreements/{agreement_id}/organization-units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Units which have been Assigned an Agreement of a Service Provider */
        get: operations["get_org_units_assigned_to_agreement_service_providers__service_provider_id__agreements__agreement_id__organization_units_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Policy Type of a Service Provider */
        get: operations["policy_type_read_service_providers__service_provider_id__policy_types__policy_type_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Usage for a Policy Type of a Service Provider */
        get: operations["policy_type_usage_read_service_providers__service_provider_id__policy_types__policy_type_id__usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policy Types of a Service Provider */
        get: operations["policy_types_read_service_providers__service_provider_id__policy_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/child-policy-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Child Policy Types of Policy Type for a Service Provider */
        get: operations["policy_type_child_policy_types_read_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Filters of Policy Type for a Service Provider */
        get: operations["policy_type_filters_read_service_providers__service_provider_id__policy_types__policy_type_id__filters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/external-policies/assigned-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organizations externally assigned this Policy Type (not via an Agreement) */
        get: operations["policy_type_external_policies_assigned_organizations_read_service_providers__service_provider_id__policy_types__policy_type_id__external_policies_assigned_organizations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/external-policies/assigned-organization-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Users externally assigned this Policy Type (not via an Agreement) */
        get: operations["policy_type_external_policies_assigned_organization_users_read_service_providers__service_provider_id__policy_types__policy_type_id__external_policies_assigned_organization_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Policy Type Entitlements for a Service Provider */
        get: operations["policy_type_entitlements_read_service_providers__service_provider_id__policy_types__policy_type_id__entitlements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policy-types/{policy_type_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Policy Type Role for a Service Provider */
        get: operations["policy_types_roles_read_service_providers__service_provider_id__policy_types__policy_type_id__roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policies/external/organization-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organization Users External policies
         * @description Retrieve Organization Users External Policies
         */
        get: operations["get_organization_users_external_policies_service_providers__service_provider_id__policies_external_organization_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policies/external/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Organization Users External policies
         * @description Retrieve Organization External Policies
         */
        get: operations["get_organizations_external_policies_service_providers__service_provider_id__policies_external_organizations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policies/external/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * All External policies
         * @description Retrieve All External Policies
         */
        get: operations["get_all_external_policies_service_providers__service_provider_id__policies_external_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policies/assign/organization_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Organization User Policy Assignment
         * @description Assigns policy_type to a specific org_user belonging to the given organization, as an SP user
         */
        post: operations["assign_policy_type_to_specific_org_user_service_providers__service_provider_id__policies_assign_organization_user_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policies/assign/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Organization Policy Assignment
         * @description Assigns policy_type to a specific organization as an SP user
         */
        post: operations["assign_policy_type_to_specific_org_service_providers__service_provider_id__policies_assign_organization_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policies/unassign/organization_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Organization User Policy Assignment
         * @description Unassigns policy_type from a specific org_user
         */
        post: operations["unassign_policy_type_from_specific_org_user_service_providers__service_provider_id__policies_unassign_organization_user_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/policies/unassign/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Organization Policy Assignment
         * @description Unassigns policy_type from a specific organization
         */
        post: operations["unassign_policy_type_from_specific_org_service_providers__service_provider_id__policies_unassign_organization_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return policies to an OAuth Client associated with a Service Provider */
        get: operations["get_oauth_client_policies_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies_get"];
        /** Assign policies to an OAuth Client associated with a Service Provider */
        put: operations["assign_oauth_client_policies_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies_put"];
        /** Add policies to an OAuth Client associated with a Service Provider */
        post: operations["add_oauth_client_policies_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Assign policies to multiple OAuth Client associated with a Service Provider */
        put: operations["assign_oauth_client_policies_to_multiple_oauth_clients_service_providers__service_provider_id__oauth_clients_policies_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/policies/{policy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unassign policy to an OAuth Client associated with a Service Provider */
        delete: operations["unassign_oauth_client_policy_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies__policy_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/filters/{filter_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Filter of a Service Provider */
        get: operations["filter_read_service_providers__service_provider_id__filters__filter_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Filters of a Service Provider */
        get: operations["get_filters_by_service_provider_service_providers__service_provider_id__filters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Resource Types for a Service Provider */
        get: operations["resource_types_read_service_providers__service_provider_id__resource_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-types/{resource_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Resource Type */
        get: operations["get_resource_type_service_providers__service_provider_id__resource_types__resource_type_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-attribute-types/{resource_attribute_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read resource attribute type */
        get: operations["read_resource_attribute_type_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/resource-attribute-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List resource attribute types */
        get: operations["get_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/roles/{role_id}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Usage of a Role in a Service Provider */
        get: operations["role_usage_read_service_providers__service_provider_id__roles__role_id__usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/entitlements/{entitlement_id}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Usage of an Entitlement in a Service Provider */
        get: operations["entitlement_usage_read_service_providers__service_provider_id__entitlements__entitlement_id__usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreement-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Agreement Types available via self service */
        get: operations["agreement_types_read_service_consumers__service_consumer_id__agreement_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreement-types/{agreement_type_id}/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Agreement Type Service Consumer Signup */
        post: operations["create_agreement_type_signup_service_consumers__service_consumer_id__agreement_types__agreement_type_id__sign_up_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Agreements of a Service Consumer */
        get: operations["service_consumer_agreements_read_service_consumers__service_consumer_id__agreements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an Agreement of a Service Consumer */
        get: operations["service_consumer_agreement_read_service_consumers__service_consumer_id__agreements__agreement_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policies of an Agreement of a Service Consumer */
        get: operations["service_consumer_agreement_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancels an Agreement of a Service Consumer */
        post: operations["service_consumer_agreement_cancel_service_consumers__service_consumer_id__agreements__agreement_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/contact-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Contact Organization User of an Agreement of a Service Consumer */
        put: operations["service_consumer_agreement_contact_update_service_consumers__service_consumer_id__agreements__agreement_id__contact_update_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Organization Groups assigned to an Agreement of a Service Consumer */
        get: operations["get_org_groups_assigned_to_agreement_policies_service_consumers__service_consumer_id__agreements__agreement_id__organization_groups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-groups/{organization_group_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policies of an Agreement assigned to an Organization Group of a Service Consumer */
        get: operations["service_consumer_agreement_organization_group_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__organization_groups__organization_group_id__policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-groups/{organization_group_id}/policies/optional": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Optional Policies of an Agreement assigned to an Organization Group of a Service Consumer */
        put: operations["service_consumer_agreement_organization_group_policies_optional_update_service_consumers__service_consumer_id__agreements__agreement_id__organization_groups__organization_group_id__policies_optional_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/assign-to/organization-group/{organization_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign Agreement's Policies to Organization Group */
        post: operations["assign_agreement_policies_to_organization_group_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_group__organization_group_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/unassign-from/organization-group/{organization_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** UnAssign Agreement's Policies from Organization Group */
        post: operations["unassign_agreement_policies_from_organization_group_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_group__organization_group_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Organization Units assigned to an Agreement of a Service Consumer */
        get: operations["get_org_units_assigned_to_agreement_policies_service_consumers__service_consumer_id__agreements__agreement_id__organization_units_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-units/{organization_unit_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policies of an Agreement assigned to an Organization Unit of a Service Consumer */
        get: operations["service_consumer_agreement_organization_unit_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__organization_units__organization_unit_id__policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-units/{organization_unit_id}/policies/optional": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Optional Policies of an Agreement assigned to an Organization Unit of a Service Consumer */
        put: operations["service_consumer_agreement_organization_unit_policies_optional_update_service_consumers__service_consumer_id__agreements__agreement_id__organization_units__organization_unit_id__policies_optional_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/assign-to/organization-unit/{organization_unit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign Agreement's Policies to Organization Unit */
        post: operations["assign_agreement_policies_to_organization_unit_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_unit__organization_unit_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/unassign-from/organization-unit/{organization_unit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** UnAssign Agreement's Policies from Organization Unit */
        post: operations["unassign_agreement_policies_from_organization_unit_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_unit__organization_unit_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Organization Users assigned to an Agreement of a Service Consumer */
        get: operations["get_org_users_assigned_to_agreement_policies_service_consumers__service_consumer_id__agreements__agreement_id__organization_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-users/{organization_user_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policies of an Agreement assigned to an Organization User of a Service Consumer */
        get: operations["service_consumer_agreement_organization_user_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__organization_users__organization_user_id__policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/organization-users/{organization_user_id}/policies/optional": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Optional Policies of an Agreement assigned to an Organization User of a Service Consumer */
        put: operations["service_consumer_agreement_organization_user_policies_optional_update_service_consumers__service_consumer_id__agreements__agreement_id__organization_users__organization_user_id__policies_optional_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/assign-to/organization-user/{organization_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign Agreement's Policies to Organization User */
        post: operations["assign_agreement_policies_to_organization_user_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_user__organization_user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/unassign-from/organization-user/{organization_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** UnAssign Agreement's Policies from Organization User */
        post: operations["unassign_agreement_policies_from_organization_user_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_user__organization_user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/organization-groups/{organization_group_id}/agreements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Agreements associated with an Organization Group of a Service Consumer */
        get: operations["get_agreements_assigned_to_organization_group_service_consumers__service_consumer_id__organization_groups__organization_group_id__agreements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/organization-groups/{organization_group_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policies associated with an Organization Group of a Service Consumer */
        get: operations["get_policies_assigned_to_organization_group_service_consumers__service_consumer_id__organization_groups__organization_group_id__policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/organization-units/{organization_unit_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policies associated with an Organization Unit of a Service Consumer */
        get: operations["get_policies_assigned_to_organization_unit_service_consumers__service_consumer_id__organization_units__organization_unit_id__policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/organization-users/{organization_user_id}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policies associated with an Organization User of a Service Consumer */
        get: operations["get_policies_assigned_to_organization_user_service_consumers__service_consumer_id__organization_users__organization_user_id__policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/policies/external/organization-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Organization User External Policies by Service Consumer ID */
        get: operations["get_organization_user_external_policies_by_service_consumer_id_service_consumers__service_consumer_id__policies_external_organization_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/policies/external/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Organization External Policies by Service Consumer ID */
        get: operations["get_organization_external_policies_by_service_consumer_id_service_consumers__service_consumer_id__policies_external_organization_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/assign-to/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign Agreement's Policies to Service Consumer Organization */
        post: operations["assign_agreement_policies_to_service_consumer_organization_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/unassign-from/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** UnAssign Agreement's Policies from Organization */
        post: operations["unassign_agreement_policies_from_organization_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/billing-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Set the service consumer agreement billing status to processing */
        patch: operations["set_sc_agreement_billing_status_to_processing_service_consumers__service_consumer_id__agreements__agreement_id__billing_status_patch"];
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/agreements/{agreement_id}/legal-document-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Set the service consumer agreement legal document status to processing if not already active */
        patch: operations["set_sc_agreement_legal_document_status_status_to_processing_service_consumers__service_consumer_id__agreements__agreement_id__legal_document_status_patch"];
        trace?: never;
    };
    "/policy-type-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Policy Categories */
        get: operations["policy_categories_read_policy_type_categories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy-type-categories/{policy_category_id}/ux": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the UX Behaviour for a Policy Category */
        get: operations["policy_category_ux_behaviour_read_policy_type_categories__policy_category_id__ux_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-consumers/{service_consumer_id}/user-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the User Access */
        get: operations["user_access_read_service_consumers__service_consumer_id__user_access_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Load Data
         * @description Loads initial dataset in DEBUG / Dev Environment.
         *     Not usable for (pre-)production
         *     The dataset id corresponds with the datasets in the tests part of the project
         */
        get: operations["load_data_load__dataset_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unload/e2e": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Unload E2E */
        get: operations["unload_e2e_unload_e2e_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AgreementBillingStatusUpdate */
        AgreementBillingStatusUpdate: {
            billing_status: components["schemas"]["BillingStatus"];
        };
        /** AgreementCreate */
        AgreementCreate: {
            /** Id */
            id?: string | null;
            /** Effective From Date */
            effective_from_date?: string | null;
            /** Valid Until */
            valid_until?: string | null;
        };
        /** AgreementOptionalPoliciesUpdate */
        AgreementOptionalPoliciesUpdate: {
            /**
             * Optional Policy Ids
             * @default []
             */
            optional_policy_ids: string[];
        };
        /** AgreementRead */
        AgreementRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /**
             * Cancelled
             * @default false
             */
            cancelled: boolean;
            /** Service Consumer Id */
            service_consumer_id?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean;
            /** Effective From Date */
            effective_from_date?: string | null;
            /** Valid Until */
            valid_until?: string | null;
            agreement_type: components["schemas"]["AgreementTypeRead"];
            status: components["schemas"]["PolicyAssignmentStatus"];
            /** Contact Organization User Id */
            contact_organization_user_id?: string | null;
        };
        /** AgreementReadExtended */
        AgreementReadExtended: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /**
             * Cancelled
             * @default false
             */
            cancelled: boolean;
            /** Service Consumer Id */
            service_consumer_id?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean;
            /** Effective From Date */
            effective_from_date?: string | null;
            /** Valid Until */
            valid_until?: string | null;
            agreement_type: components["schemas"]["AgreementTypeWithPoliciesRead"];
            status: components["schemas"]["PolicyAssignmentStatus"];
            /** Contact Organization User Id */
            contact_organization_user_id?: string | null;
            billing_status: components["schemas"]["BillingStatus"];
            legal_document_status: components["schemas"]["LegalDocumentStatus"];
        };
        /**
         * AgreementTypeCategory
         * @enum {string}
         */
        AgreementTypeCategory: "UNKNOWN" | "ACCESS" | "SUBSCRIPTION";
        /** AgreementTypePoliciesCountAllocatedRead */
        AgreementTypePoliciesCountAllocatedRead: {
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description?: string | null;
            /** Default Policies */
            default_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Optional Policies */
            optional_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Allocated */
            allocated: boolean;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /**
             * Marketing Features
             * @default []
             */
            marketing_features: string[];
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            /** @default ACCESS */
            category: components["schemas"]["AgreementTypeCategory"];
            billing_type?: components["schemas"]["BillingType"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Agreement Count */
            agreement_count: number;
        };
        /** AgreementTypeRead */
        AgreementTypeRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /**
             * Marketing Features
             * @default []
             */
            marketing_features: string[];
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            /** @default ACCESS */
            category: components["schemas"]["AgreementTypeCategory"];
            billing_type?: components["schemas"]["BillingType"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** AgreementTypeWithPoliciesRead */
        AgreementTypeWithPoliciesRead: {
            /** Default Policies */
            default_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Optional Policies */
            optional_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /**
             * Marketing Features
             * @default []
             */
            marketing_features: string[];
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            /** @default ACCESS */
            category: components["schemas"]["AgreementTypeCategory"];
            billing_type?: components["schemas"]["BillingType"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** AgreementUsageRead */
        AgreementUsageRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description?: string | null;
        };
        /** AllPolicyRead */
        AllPolicyRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Owner Id
             * Format: uuid
             */
            owner_id: string;
            /**
             * Assigned By Id
             * Format: uuid
             */
            assigned_by_id: string;
            /**
             * Resource Owner Id
             * Format: uuid
             */
            resource_owner_id: string;
            /** Type Id */
            type_id?: string | null;
            /** Valid From */
            valid_from?: string | null;
            /** Valid Until */
            valid_until?: string | null;
            /**
             * Optional
             * @default false
             */
            optional: boolean | null;
            /** Agreement Id */
            agreement_id?: string | null;
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
            policy_assignment: components["schemas"]["PolicyAssignment"];
            /** Assigned Id */
            assigned_id?: string | null;
            /** Assigned Organization Name */
            assigned_organization_name?: string | null;
            /** Assigned On */
            assigned_on?: string | null;
        };
        /**
         * AttributeOf
         * @enum {string}
         */
        AttributeOf: "S" | "C" | "R" | "O" | "OU" | "UO" | "OG" | "SPU" | "SYSTEM" | "CONTEXT" | "RESOURCE" | "ORGANIZATION" | "ORGANIZATION_UNIT" | "ORGANIZATION_USER" | "ORGANIZATION_GROUP" | "SERVICE_PROVIDER_USER";
        /**
         * BillingStatus
         * @enum {string}
         */
        BillingStatus: "UNKNOWN" | "PROCESSING" | "NO_PAYMENT_REQUIRED" | "ONCE_OFF_PAYMENT_DUE" | "ONCE_OFF_PAYMENT_COMPLETE" | "RECURRING_PAYMENT_DUE" | "RECURRING_PAYMENT_COMPLETE" | "PAYMENT_SETUP_COMPLETE" | "PAYMENT_OR_SETUP_DUE" | "PAYMENT_OR_SETUP_COMPLETE";
        /**
         * BillingType
         * @enum {string}
         */
        BillingType: "FREE" | "ONCE_OFF" | "FLAT_FEE_RECURRING" | "SEAT_BASED_RECURRING" | "USER_BASED_RECURRING" | "TRANSACTION_BASED_RECURRING";
        /** EntitlementUsageRead */
        EntitlementUsageRead: {
            /** Policy Types */
            policy_types: components["schemas"]["SPPolicyTypeRead"][];
        };
        /** FilterItemRead */
        FilterItemRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Filter Id
             * Format: uuid
             */
            filter_id: string;
            value_source?: components["schemas"]["AttributeOf"] | null;
            /** Value Type */
            value_type?: string | null;
            /** Value */
            value?: unknown | null;
            attribute_source?: components["schemas"]["AttributeOf"] | null;
            /** Attribute Type */
            attribute_type: string;
            /** Operator */
            operator: string;
        };
        /** FilterRead */
        FilterRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Operator */
            operator: string;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /** Filter Items */
            filter_items?: components["schemas"]["FilterItemRead"][] | null;
            /** Filters */
            filters?: components["schemas"]["NestedFilterRead"][] | null;
            /**
             * Policy Types
             * @default []
             */
            policy_types: components["schemas"]["PolicyTypeSummaryRead"][];
            /**
             * Parent Filters
             * @default []
             */
            parent_filters: components["schemas"]["NestedFilterRead"][];
        };
        /**
         * FormatOption
         * @enum {string}
         */
        FormatOption: "S" | "I" | "B" | "D" | "STRING" | "INTEGER" | "BOOLEAN" | "DECIMAL" | "DATETIME";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LegalDocumentStatus
         * @enum {string}
         */
        LegalDocumentStatus: "UNKNOWN" | "PROCESSING" | "NO_LEGAL_DOCUMENTS" | "UNSIGNED_LEGAL_DOCUMENTS" | "SIGNED_LEGAL_DOCUMENTS";
        /** NestedFilterRead */
        NestedFilterRead: {
            /** Parent Filter Id */
            parent_filter_id?: string | null;
            /** Child Filter Id */
            child_filter_id?: string | null;
        };
        /** OAuthClientPolicyAssignmentCreate */
        OAuthClientPolicyAssignmentCreate: {
            /** Ids */
            ids: string[];
        };
        /** OAuthClientPolicyAssignmentMultipleClientsCreate */
        OAuthClientPolicyAssignmentMultipleClientsCreate: {
            /** Policy Type Ids */
            policy_type_ids: string[];
            /** Oauth Client Ids */
            oauth_client_ids: string[];
        };
        /** OAuthClientPolicyAssignmentRead */
        OAuthClientPolicyAssignmentRead: {
            /**
             * Oauth Client Id
             * Format: uuid
             */
            oauth_client_id: string;
            /**
             * Policy Id
             * Format: uuid
             */
            policy_id: string;
            policy_type: components["schemas"]["PolicyTypeSummaryRead"];
        };
        /** OrganizationGroupIDRead */
        OrganizationGroupIDRead: {
            /**
             * Organization Group Id
             * Format: uuid
             */
            organization_group_id: string;
        };
        /** OrganizationGroupPolicyAssignmentRead */
        OrganizationGroupPolicyAssignmentRead: {
            /**
             * Organization Group Id
             * Format: uuid
             */
            organization_group_id: string;
            /**
             * Policy Id
             * Format: uuid
             */
            policy_id: string;
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
            /**
             * Assigned On
             * Format: date-time
             */
            assigned_on: string;
        };
        /** OrganizationPolicyAssignmentRead */
        OrganizationPolicyAssignmentRead: {
            /**
             * Policy Id
             * Format: uuid
             */
            policy_id: string;
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
            /**
             * Assigned On
             * Format: date-time
             */
            assigned_on: string;
            status: components["schemas"]["PolicyAssignmentStatus"];
        };
        /** OrganizationPolicyTypeAssign */
        OrganizationPolicyTypeAssign: {
            /**
             * Policy Type Id
             * Format: uuid
             */
            policy_type_id: string;
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
        };
        /** OrganizationRead */
        OrganizationRead: {
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
            /** Name */
            name: string;
        };
        /** OrganizationUnitIDRead */
        OrganizationUnitIDRead: {
            /**
             * Organization Unit Id
             * Format: uuid
             */
            organization_unit_id: string;
        };
        /** OrganizationUnitPolicyAssignmentIDRead */
        OrganizationUnitPolicyAssignmentIDRead: {
            /** Organization Unit Id */
            organization_unit_id?: string | null;
        };
        /** OrganizationUnitPolicyAssignmentRead */
        OrganizationUnitPolicyAssignmentRead: {
            /**
             * Organization Unit Id
             * Format: uuid
             */
            organization_unit_id: string;
            /**
             * Policy Id
             * Format: uuid
             */
            policy_id: string;
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
            /**
             * Assigned On
             * Format: date-time
             */
            assigned_on: string;
        };
        /** OrganizationUserIDRead */
        OrganizationUserIDRead: {
            /**
             * Organization User Id
             * Format: uuid
             */
            organization_user_id: string;
        };
        /** OrganizationUserPolicyAssignmentRead */
        OrganizationUserPolicyAssignmentRead: {
            /**
             * Policy Id
             * Format: uuid
             */
            policy_id: string;
            /**
             * Organization User Id
             * Format: uuid
             */
            organization_user_id: string;
            /**
             * Assigned On
             * Format: date-time
             */
            assigned_on: string;
            status: components["schemas"]["PolicyAssignmentStatus"];
        };
        /** OrganizationUserPolicyAssignmentUserIDRead */
        OrganizationUserPolicyAssignmentUserIDRead: {
            /** Organization User Id */
            organization_user_id?: string | null;
        };
        /** OrganizationUserPolicyTypeAssign */
        OrganizationUserPolicyTypeAssign: {
            /**
             * Policy Type Id
             * Format: uuid
             */
            policy_type_id: string;
            /**
             * Organization User Id
             * Format: uuid
             */
            organization_user_id: string;
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
        };
        /** PaginationSchema[AgreementTypePoliciesCountAllocatedRead] */
        PaginationSchema_AgreementTypePoliciesCountAllocatedRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["AgreementTypePoliciesCountAllocatedRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[AllPolicyRead] */
        PaginationSchema_AllPolicyRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["AllPolicyRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[FilterRead] */
        PaginationSchema_FilterRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["FilterRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OAuthClientPolicyAssignmentRead] */
        PaginationSchema_OAuthClientPolicyAssignmentRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OAuthClientPolicyAssignmentRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationGroupIDRead] */
        PaginationSchema_OrganizationGroupIDRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationGroupIDRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationUnitIDRead] */
        PaginationSchema_OrganizationUnitIDRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationUnitIDRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationUnitPolicyAssignmentIDRead] */
        PaginationSchema_OrganizationUnitPolicyAssignmentIDRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationUnitPolicyAssignmentIDRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationUserIDRead] */
        PaginationSchema_OrganizationUserIDRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationUserIDRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationUserPolicyAssignmentUserIDRead] */
        PaginationSchema_OrganizationUserPolicyAssignmentUserIDRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationUserPolicyAssignmentUserIDRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[PolicyReadWithOwnerName] */
        PaginationSchema_PolicyReadWithOwnerName_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["PolicyReadWithOwnerName"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[PolicyRead] */
        PaginationSchema_PolicyRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["PolicyRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ResourceAttributeTypeInUseRead] */
        PaginationSchema_ResourceAttributeTypeInUseRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ResourceAttributeTypeInUseRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ResourceTypeRead] */
        PaginationSchema_ResourceTypeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ResourceTypeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[SCAgreementRead] */
        PaginationSchema_SCAgreementRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["SCAgreementRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[SCAgreementTypePoliciesCountAllocatedRead] */
        PaginationSchema_SCAgreementTypePoliciesCountAllocatedRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["SCAgreementTypePoliciesCountAllocatedRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[SPAgreementRead] */
        PaginationSchema_SPAgreementRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["SPAgreementRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[SPPolicyTypeRead] */
        PaginationSchema_SPPolicyTypeRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["SPPolicyTypeRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /**
         * PolicyAssignment
         * @enum {string}
         */
        PolicyAssignment: "ORGANIZATION" | "ORGANIZATION_USER";
        /**
         * PolicyAssignmentStatus
         * @enum {string}
         */
        PolicyAssignmentStatus: "P" | "A" | "R" | "PENDING" | "ACCEPTED" | "REJECTED";
        /**
         * PolicyAssignmentType
         * @enum {string}
         */
        PolicyAssignmentType: "ORGANIZATION" | "ORGANIZATION_USER";
        /** PolicyCategoryReadLimited */
        PolicyCategoryReadLimited: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /**
         * PolicyOutcome
         * @enum {string}
         */
        PolicyOutcome: "A" | "D" | "U" | "I" | "R" | "ALLOW" | "DENY" | "AUDIT" | "INCONCLUSIVE" | "ROLE";
        /** PolicyRead */
        PolicyRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Owner Id
             * Format: uuid
             */
            owner_id: string;
            /**
             * Assigned By Id
             * Format: uuid
             */
            assigned_by_id: string;
            /**
             * Resource Owner Id
             * Format: uuid
             */
            resource_owner_id: string;
            /** Type Id */
            type_id?: string | null;
            /** Valid From */
            valid_from?: string | null;
            /** Valid Until */
            valid_until?: string | null;
            /**
             * Optional
             * @default false
             */
            optional: boolean | null;
            /** Agreement Id */
            agreement_id?: string | null;
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
        };
        /** PolicyReadWithOwnerName */
        PolicyReadWithOwnerName: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Owner Id
             * Format: uuid
             */
            owner_id: string;
            /**
             * Assigned By Id
             * Format: uuid
             */
            assigned_by_id: string;
            /**
             * Resource Owner Id
             * Format: uuid
             */
            resource_owner_id: string;
            /** Type Id */
            type_id?: string | null;
            /** Valid From */
            valid_from?: string | null;
            /** Valid Until */
            valid_until?: string | null;
            /**
             * Optional
             * @default false
             */
            optional: boolean | null;
            /** Agreement Id */
            agreement_id?: string | null;
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
            /** Owner Name */
            owner_name?: string | null;
        };
        /** PolicyTypeBaseReadExternalFacingFields */
        PolicyTypeBaseReadExternalFacingFields: {
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** PolicyTypeEntitlementRead */
        PolicyTypeEntitlementRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Entitlement Id
             * Format: uuid
             */
            entitlement_id: string;
            status: components["schemas"]["ValidationStatus"];
        };
        /** PolicyTypeEntitlementsRead */
        PolicyTypeEntitlementsRead: {
            /** Entitlements */
            entitlements: components["schemas"]["PolicyTypeEntitlementRead"][];
        };
        /** PolicyTypeRead */
        PolicyTypeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            outcome: components["schemas"]["PolicyOutcome"];
            /** Return Value */
            return_value?: string | null;
            /** Audit Level */
            audit_level?: string | null;
            /** Troubleshoot */
            troubleshoot: boolean;
            /** Troubleshoot End */
            troubleshoot_end?: string | null;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Filters */
            filters?: string[] | null;
            /** Child Policy Types */
            child_policy_types?: string[] | null;
            /** Has Policy Instances */
            has_policy_instances: boolean;
            /** Used In Agreement Type */
            used_in_agreement_type?: boolean | null;
        };
        /** PolicyTypeRoleRead */
        PolicyTypeRoleRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
            status: components["schemas"]["ValidationStatus"];
        };
        /** PolicyTypeRolesRead */
        PolicyTypeRolesRead: {
            /** Roles */
            roles: components["schemas"]["PolicyTypeRoleRead"][];
        };
        /** PolicyTypeSummaryRead */
        PolicyTypeSummaryRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
        };
        /** PolicyTypeUsageRead */
        PolicyTypeUsageRead: {
            /** Policies */
            policies: components["schemas"]["PolicyUsageRead"][];
            /** Agreements */
            agreements: components["schemas"]["AgreementUsageRead"][];
            /** Users Count */
            users_count: number;
            /** Organizations Count */
            organizations_count: number;
        };
        /** PolicyUsageRead */
        PolicyUsageRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /** ResourceAttributeTypeInUseRead */
        ResourceAttributeTypeInUseRead: {
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            format_option: components["schemas"]["FormatOption"];
            /** Created Date */
            created_date?: string | null;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** In Use */
            in_use: boolean;
        };
        /** ResourceTypeExtendedRead */
        ResourceTypeExtendedRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Number Of Attributes */
            number_of_attributes?: number | null;
            /** Resource Attribute Types */
            resource_attribute_types?: string[] | null;
        };
        /** ResourceTypeRead */
        ResourceTypeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Number Of Attributes */
            number_of_attributes?: number | null;
        };
        /** RoleUsageRead */
        RoleUsageRead: {
            /** Policy Types */
            policy_types: components["schemas"]["PolicyTypeBaseReadExternalFacingFields"][];
        };
        /** SCAgreementContactUserUpdate */
        SCAgreementContactUserUpdate: {
            /**
             * Contact Organization User Id
             * Format: uuid
             */
            contact_organization_user_id: string;
        };
        /** SCAgreementPoliciesRead */
        SCAgreementPoliciesRead: {
            /** Default Policy Ids */
            default_policy_ids: string[];
            /** Optional Policy Ids */
            optional_policy_ids: string[];
        };
        /** SCAgreementRead */
        SCAgreementRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Type
             * Format: uuid
             */
            type: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Active */
            active: boolean;
            /** Cancelled */
            cancelled: boolean;
            /** Effective From Date */
            effective_from_date?: string | null;
            /** Valid Until */
            valid_until?: string | null;
            /** Agreement Type Name */
            agreement_type_name: string;
            /** Description */
            description?: string | null;
            /**
             * Has Optional Policies
             * @default false
             */
            has_optional_policies: boolean;
            /** Contact Organization User Id */
            contact_organization_user_id?: string | null;
            /** Distribution Allowed Organization User */
            distribution_allowed_organization_user: boolean;
            /** Distribution Allowed Organization Unit */
            distribution_allowed_organization_unit: boolean;
            /** Distribution Allowed Organization Group */
            distribution_allowed_organization_group: boolean;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            legal_document_status: components["schemas"]["LegalDocumentStatus"];
            billing_status: components["schemas"]["BillingStatus"];
            /** Cancel At Period End */
            cancel_at_period_end: boolean;
        };
        /** SCAgreementTypePoliciesCountAllocatedRead */
        SCAgreementTypePoliciesCountAllocatedRead: {
            /** Default Policies */
            default_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Optional Policies */
            optional_policies?: components["schemas"]["PolicyTypeRead"][] | null;
            /** Allocated */
            allocated: boolean;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Distribution Allowed Organization */
            distribution_allowed_organization?: boolean | null;
            /** Include In Self Service */
            include_in_self_service?: boolean | null;
            /** Self Service Order */
            self_service_order?: number | null;
            /**
             * Marketing Features
             * @default []
             */
            marketing_features: string[];
            /**
             * Distribution Allowed Organization User
             * @default true
             */
            distribution_allowed_organization_user: boolean;
            /**
             * Distribution Allowed Organization Unit
             * @default true
             */
            distribution_allowed_organization_unit: boolean;
            /**
             * Distribution Allowed Organization Group
             * @default true
             */
            distribution_allowed_organization_group: boolean;
            /** @default ACCESS */
            category: components["schemas"]["AgreementTypeCategory"];
            billing_type?: components["schemas"]["BillingType"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Agreement Count */
            agreement_count: number;
        };
        /** SCPolicyRead */
        SCPolicyRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Agreement Id */
            agreement_id?: string | null;
        };
        /** SPAgreementRead */
        SPAgreementRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Consumer Id
             * Format: uuid
             */
            service_consumer_id: string;
            /** Service Consumer Name */
            service_consumer_name?: string | null;
            /** Agreement Name */
            agreement_name: string;
            /** Effective From Date */
            effective_from_date?: string | null;
            /** Cancelled */
            cancelled: boolean;
            /** Active */
            active: boolean;
            /** Description */
            description?: string | null;
            /** Valid Until */
            valid_until?: string | null;
            category: components["schemas"]["AgreementTypeCategory"];
            /** Cancel At Period End */
            cancel_at_period_end: boolean;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
        };
        /** SPPolicyTypeRead */
        SPPolicyTypeRead: {
            /** External Facing Name */
            external_facing_name: string;
            /** External Facing Description */
            external_facing_description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            outcome: components["schemas"]["PolicyOutcome"];
            /** Return Value */
            return_value?: string | null;
            /** Audit Level */
            audit_level?: string | null;
            /** Troubleshoot */
            troubleshoot: boolean;
            /** Troubleshoot End */
            troubleshoot_end?: string | null;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Filters */
            filters?: string[] | null;
            /** Child Policy Types */
            child_policy_types?: string[] | null;
            /** Has Policy Instances */
            has_policy_instances: boolean;
            /** Used In Agreement Type */
            used_in_agreement_type?: boolean | null;
            /** Has Child Or Parent Policy Types */
            has_child_or_parent_policy_types: boolean;
        };
        /** ServiceProviderLogoRead */
        ServiceProviderLogoRead: {
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Logo Url */
            logo_url: string;
        };
        /** UXBehaviour */
        UXBehaviour: {
            /** Entity */
            entity: string;
            /** Show */
            show: boolean;
            /** Editable */
            editable: boolean;
            /** Default Value */
            default_value?: string | null;
            /** Label */
            label?: string | null;
            /** Help Description */
            help_description?: string | null;
            /** Input Placeholder */
            input_placeholder?: string | null;
        };
        /** UserAccess */
        UserAccess: {
            /** Organization Name */
            organization_name: string;
            /** Subscriptions */
            subscriptions: components["schemas"]["UserAccessSubscriptionRead"][];
            /** Access Licenses */
            access_licenses: components["schemas"]["UserAccessLicenseRead"][];
            /** Policies */
            policies: components["schemas"]["UserAccessPolicyRead"][];
            /** Service Provider Logos */
            service_provider_logos: components["schemas"]["ServiceProviderLogoRead"][];
        };
        /** UserAccessLicenseRead */
        UserAccessLicenseRead: {
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Service Provider Name */
            service_provider_name: string;
            /** Agreement Type Name */
            agreement_type_name: string;
            user_access_type: components["schemas"]["UserAccessType"];
            /** Agreement Type Description */
            agreement_type_description?: string | null;
            /** Service Provider Logo Url */
            service_provider_logo_url?: string | null;
        };
        /** UserAccessPolicyRead */
        UserAccessPolicyRead: {
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Service Provider Name */
            service_provider_name: string;
            /** Policy Type Name */
            policy_type_name: string;
            /** Policy Type Description */
            policy_type_description?: string | null;
            user_access_type: components["schemas"]["UserAccessType"];
        };
        /** UserAccessSubscriptionRead */
        UserAccessSubscriptionRead: {
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
            /** Service Provider Name */
            service_provider_name: string;
            /** Agreement Type Name */
            agreement_type_name: string;
            user_access_type: components["schemas"]["UserAccessType"];
            /** Agreement Type Description */
            agreement_type_description?: string | null;
            /** Service Provider Logo Url */
            service_provider_logo_url?: string | null;
        };
        /**
         * UserAccessType
         * @enum {string}
         */
        UserAccessType: "SUBSCRIPTION" | "ACCESS_LICENSE" | "POLICY";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * ValidationStatus
         * @enum {string}
         */
        ValidationStatus: "PENDING" | "ACCEPTED" | "REJECTED";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    agreement_type_read_service_providers__service_provider_id__agreement_types__agreement_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Type Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementTypePoliciesCountAllocatedRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_type_policy_types_read_service_providers__service_provider_id__agreement_types__agreement_type_id__policy_types_get: {
        parameters: {
            query?: {
                /** @description Policy Type Offset */
                offset?: number;
                /** @description Max number of Policy Types */
                limit?: number;
                /** @description A search query is used to search policies using (policy_type_name, policy_type_description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policy Type: ['policy.owner_id', 'policy.assigned_by_id', 'policy.resource_owner_id', 'policy.type_id', 'policy.valid_from', 'policy.valid_until', 'policy.optional', 'policy_type.name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy Types Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SPPolicyTypeRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_types_read_service_providers__service_provider_id__agreement_types_get: {
        parameters: {
            query?: {
                /** @description Exclude Agreement Types with an Agreement that has this Service Consumer ID */
                service_consumer_id_excluded?: string;
                /** @description Agreement Type IDs to return */
                agreement_type_ids?: string[];
                /** @description Agreement Types Offset */
                offset?: number;
                /** @description Max number of Agreement Types */
                limit?: number;
                /** @description Disable pagination */
                disable_pagination?: boolean | null;
                /** @description A search query is used to search agreement type using (name, description, ) */
                query?: string | null;
                /** @description Filter by include_in_self_service */
                include_in_self_service?: boolean | null;
                /** @description Filter by category */
                category?: components["schemas"]["AgreementTypeCategory"] | null;
                /** @description Attribute used to sort the Agreement Type: ['agreement_type.service_provider_id', 'agreement_type.distribution_allowed_organization', 'agreement_type.include_in_self_service', 'agreement_type.self_service_order', 'agreement_type.name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Types Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_AgreementTypePoliciesCountAllocatedRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_agreement_type_to_organization_service_providers__service_provider_id__agreement_types__agreement_type_id__assign__organization_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
                /** @description Organization ID */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementCreate"];
            };
        };
        responses: {
            /** @description Agreement Type assigned to Organization, creating an Agreement instance */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementRead"];
                };
            };
            /** @description This organization has an active agreement of this type or there no Default Policy types */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_types_assigned_organizations_read_service_providers__service_provider_id__agreement_types__agreement_type_id__assigned_organizations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organizations Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Agreement Type with this ID for this Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_agreements_read_service_providers__service_provider_id__agreements_get: {
        parameters: {
            query?: {
                /** @description ID of the Service Consumer */
                service_consumer_id?: string;
                /** @description Filter by cancelled agreements */
                cancelled?: boolean | null;
                /** @description Filter by agreement type category */
                category?: components["schemas"]["AgreementTypeCategory"] | null;
                /** @description Name of the Service Consumer */
                service_consumer_name?: string | null;
                /** @description Filter by agreement status */
                status?: components["schemas"]["PolicyAssignmentStatus"] | null;
                /** @description Agreement Type IDs list to filter by */
                agreement_type_ids?: string[] | null;
                /** @description A search query is used to search agreements using (agreement_type_name, ) */
                query?: string | null;
                /** @description Agreements Offset */
                offset?: number;
                /** @description Max number of Agreements */
                limit?: number;
                /** @description Attribute used to sort the Agreements: ['service_consumer_id', 'name', 'effective_from_date', 'valid_until', 'status', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreements Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SPAgreementRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_agreement_read_service_providers__service_provider_id__agreements__agreement_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPAgreementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_agreement_cancel_service_providers__service_provider_id__agreements__agreement_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Cancelled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPAgreementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement was Cancelled Before */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_org_users_assigned_agreement_policies_service_providers__service_provider_id__agreements__agreement_id__organization_users_get: {
        parameters: {
            query?: {
                /** @description Organization Users Offset */
                offset?: number;
                /** @description Max number of Organization Users */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationUserPolicyAssignmentUserIDRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_org_units_assigned_to_agreement_service_providers__service_provider_id__agreements__agreement_id__organization_units_get: {
        parameters: {
            query?: {
                /** @description Organization Units Offset */
                offset?: number;
                /** @description Max number of Organization Units */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Units Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationUnitPolicyAssignmentIDRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_read_service_providers__service_provider_id__policy_types__policy_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SPPolicyTypeRead"];
                };
            };
            /** @description Policy Type Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_usage_read_service_providers__service_provider_id__policy_types__policy_type_id__usage_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeUsageRead"];
                };
            };
            /** @description Policy Type Usage Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_types_read_service_providers__service_provider_id__policy_types_get: {
        parameters: {
            query?: {
                /** @description ID of the Category which is associated with the Policy Types */
                category_id?: string | null;
                /** @description IDs of the Policy Types to be retrieved */
                policy_type_ids?: string[] | null;
                /** @description ID of a Policy Type to be excluded from the results along with its parents */
                exclude_id?: string | null;
                /** @description ID of the Category which is NOT associated with the Policy Types */
                exclude_category_id?: string | null;
                /** @description ID of the Organization to which the Policy Types cannot be Assigned To */
                exclude_assigned_to_organization?: string | null;
                /** @description ID of the Organization User to which the Policy Types cannot be Assigned To */
                exclude_assigned_to_organization_user?: string | null;
                /** @description ID of the OAuth Client to which the Policy Types cannot be Assigned To */
                exclude_assigned_to_oauth_client?: string | null;
                /** @description ID of the Assigned Organization User */
                assigned_organization_user_id?: string | null;
                /** @description Policy Types Offset */
                offset?: number;
                /** @description Max number of Policy Types */
                limit?: number;
                /** @description A search query is used to search policy types using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policy Types: ['service_provider_id', 'category_id', 'name', 'outcome', 'audit_level', 'troubleshoot', 'troubleshoot_end'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SPPolicyTypeRead_"];
                };
            };
            /** @description Policy Types Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_child_policy_types_read_service_providers__service_provider_id__policy_types__policy_type_id__child_policy_types_get: {
        parameters: {
            query?: {
                /** @description Policy Types Offset */
                offset?: number;
                /** @description Max number of Policy Types */
                limit?: number;
                /** @description A search query is used to search policy types using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policy Types: ['policy_type.name', 'policy_type.outcome', 'policy_type.audit_level', 'policy_type.troubleshoot', 'policy_type.troubleshoot_end', 'policy_type.service_provider_id', 'policy_type.category_id'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SPPolicyTypeRead_"];
                };
            };
            /** @description Policy Type Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_filters_read_service_providers__service_provider_id__policy_types__policy_type_id__filters_get: {
        parameters: {
            query?: {
                /** @description Filter Offset */
                offset?: number;
                /** @description Max number of Filters */
                limit?: number;
                /** @description A search query is used to search filters using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Filters: ['filter.service_provider_id', 'filter.operator', 'filter.name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_FilterRead_"];
                };
            };
            /** @description Policy Type Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_external_policies_assigned_organizations_read_service_providers__service_provider_id__policy_types__policy_type_id__external_policies_assigned_organizations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organizations Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Organizations with Policies Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_external_policies_assigned_organization_users_read_service_providers__service_provider_id__policy_types__policy_type_id__external_policies_assigned_organization_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy Type Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserPolicyAssignmentUserIDRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Organization Users with Policies Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_type_entitlements_read_service_providers__service_provider_id__policy_types__policy_type_id__entitlements_get: {
        parameters: {
            query?: {
                /** @description Policy Type Entitlements Offset */
                offset?: number;
                /** @description Max number of Policy Type Entitlements */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeEntitlementsRead"];
                };
            };
            /** @description Policy Type Entitlements Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_types_roles_read_service_providers__service_provider_id__policy_types__policy_type_id__roles_get: {
        parameters: {
            query?: {
                /** @description Policy Type Roles Offset */
                offset?: number;
                /** @description Max number of Policy Type Roles */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Policy Type */
                policy_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTypeRolesRead"];
                };
            };
            /** @description Policy Type Roles Retrieved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organization_users_external_policies_service_providers__service_provider_id__policies_external_organization_users_get: {
        parameters: {
            query?: {
                /** @description Filter by Organization user ID */
                organization_user_id?: string | null;
                /** @description Filter by Policy Type IDs */
                policy_type_ids?: string[] | null;
                /** @description Filter by Policy Type Category ID */
                policy_category_id?: string | null;
                /** @description Offset */
                offset?: number;
                /** @description Max number of policies to retrieve */
                limit?: number;
                /** @description A search query is used to search policies using (policy type name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policies: ['name', 'description'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description External Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_PolicyRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organizations_external_policies_service_providers__service_provider_id__policies_external_organizations_get: {
        parameters: {
            query?: {
                /** @description ID of the Policy Type category */
                policy_category_id?: string;
                /** @description ID of the Organization */
                organization_id?: string;
                /** @description Offset */
                offset?: number;
                /** @description Max number of policies to retrieve */
                limit?: number;
                /** @description A search query is used to search policies using (policy type name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policies: ['policy.owner_id', 'policy.assigned_by_id', 'policy.resource_owner_id', 'policy.type_id', 'policy.valid_from', 'policy.valid_until', 'policy.optional', 'policy.agreement_id', 'policy_type.name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description External Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_PolicyRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_external_policies_service_providers__service_provider_id__policies_external_all_get: {
        parameters: {
            query?: {
                /** @description ID of the Category associated with the Policies */
                category_id?: string | null;
                /** @description ID of the Category which is NOT associated with the Policies */
                exclude_category_id?: string | null;
                /** @description List of Policy Type IDs */
                policy_type_ids?: string[] | null;
                /** @description Policy Assignment Type */
                policy_assignment?: components["schemas"]["PolicyAssignmentType"] | null;
                /** @description Offset */
                offset?: number;
                /** @description Max number of policies to retrieve */
                limit?: number;
                /** @description A search query is used to search policies using (policy type name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policies: ['id', 'owner_id', 'assigned_by_id', 'resource_owner_id', 'type_id', 'assigned_on', 'valid_from', 'valid_until', 'optional', 'agreement_id', 'name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All External Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_AllPolicyRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_policy_type_to_specific_org_user_service_providers__service_provider_id__policies_assign_organization_user_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUserPolicyTypeAssign"];
            };
        };
        responses: {
            /** @description Policy Type Assigned to Organization User */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserPolicyAssignmentRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_policy_type_to_specific_org_service_providers__service_provider_id__policies_assign_organization_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationPolicyTypeAssign"];
            };
        };
        responses: {
            /** @description Policy Type Assigned to Organization */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationPolicyAssignmentRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_policy_type_from_specific_org_user_service_providers__service_provider_id__policies_unassign_organization_user_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUserPolicyTypeAssign"];
            };
        };
        responses: {
            /** @description Policy Type UnAssigned From Organization User */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Assigned Via Agreement */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_policy_type_from_specific_org_service_providers__service_provider_id__policies_unassign_organization_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationPolicyTypeAssign"];
            };
        };
        responses: {
            /** @description Policy Type UnAssigned From Organization */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Assigned Via Agreement */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Policy Type Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_oauth_client_policies_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of policies to return */
                limit?: number;
                /** @description A search query is used to search OAuth client policies using (policy type name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the OAuth client policies: ['oauth_client_id', 'policy_id', 'status', 'assigned_on'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description OAuth Client ID */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns Policies assigned to an OAuth Client */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OAuthClientPolicyAssignmentRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_oauth_client_policies_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
                /** @description OAuth Client ID */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthClientPolicyAssignmentCreate"];
            };
        };
        responses: {
            /** @description Policies Assigned to an OAuth Client */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthClientPolicyAssignmentRead"][];
                };
            };
            /** @description Policy Type missing or belongs to another Service Provider */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_oauth_client_policies_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
                /** @description OAuth Client ID */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthClientPolicyAssignmentCreate"];
            };
        };
        responses: {
            /** @description Policies added to an OAuth Client */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthClientPolicyAssignmentRead"][];
                };
            };
            /** @description Policy Type missing or belongs to another Service Provider */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_oauth_client_policies_to_multiple_oauth_clients_service_providers__service_provider_id__oauth_clients_policies_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthClientPolicyAssignmentMultipleClientsCreate"];
            };
        };
        responses: {
            /** @description Policies Assigned to OAuth Clients */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthClientPolicyAssignmentRead"][];
                };
            };
            /** @description Policy Type missing or belongs to another Service Provider */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_oauth_client_policy_service_providers__service_provider_id__oauth_clients__oauth_client_id__policies__policy_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service Provider ID */
                service_provider_id: string;
                /** @description OAuth Client ID */
                oauth_client_id: string;
                /** @description Policy ID */
                policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy successfully unassigned from an OAuth Client */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description OAuth Client Policy Assignment Missing or belongs to another Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    filter_read_service_providers__service_provider_id__filters__filter_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Filter */
                filter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filter Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilterRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Filter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_filters_by_service_provider_service_providers__service_provider_id__filters_get: {
        parameters: {
            query?: {
                /** @description Filters Offset */
                offset?: number;
                /** @description Max number of Filters */
                limit?: number;
                /** @description A search query is used to search filters using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Filters: ['service_provider_id', 'name', 'operator'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Filters Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_FilterRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resource_types_read_service_providers__service_provider_id__resource_types_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of agreements */
                limit?: number;
                /** @description A search query is used to search resource types using (name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Resource Types: ['service_provider_id', 'name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Type Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ResourceTypeRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_type_service_providers__service_provider_id__resource_types__resource_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Resource Type */
                resource_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Type Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceTypeExtendedRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_resource_attribute_type_service_providers__service_provider_id__resource_attribute_types__resource_attribute_type_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Service provider ID */
                service_provider_id: string;
                /** @description Resource attribute type ID */
                resource_attribute_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Attribute Type retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceAttributeTypeInUseRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Attribute Type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_resource_attribute_types_service_providers__service_provider_id__resource_attribute_types_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of agreements */
                limit?: number;
                /** @description A search query is used to search resource attribute types using (name, ) */
                query?: string | null;
                /** @description Filter by in use resource attribute type */
                in_use?: boolean | null;
                /** @description Format options */
                format_option?: components["schemas"]["FormatOption"] | null;
                /** @description Attribute used to sort the Resource attribute types: ['service_provider_id', 'name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description Service provider ID */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource Attribute Types Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ResourceAttributeTypeInUseRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    role_usage_read_service_providers__service_provider_id__roles__role_id__usage_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Role */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Role Usage Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleUsageRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    entitlement_usage_read_service_providers__service_provider_id__entitlements__entitlement_id__usage_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Entitlement */
                entitlement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Entitlement Usage Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntitlementUsageRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_types_read_service_consumers__service_consumer_id__agreement_types_get: {
        parameters: {
            query?: {
                /** @description ID of the Service Provider */
                service_provider_id?: string;
                /** @description Filter by category */
                category?: components["schemas"]["AgreementTypeCategory"] | null;
                /** @description Agreement Types Offset */
                offset?: number;
                /** @description Max number of Agreement Types */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Types Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SCAgreementTypePoliciesCountAllocatedRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_agreement_type_signup_service_consumers__service_consumer_id__agreement_types__agreement_type_id__sign_up_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Type Service Consumer Signedup */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementRead"];
                };
            };
            /** @description agreement_type is not enabled for self service */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreements_read_service_consumers__service_consumer_id__agreements_get: {
        parameters: {
            query?: {
                /** @description ID of the Assigned Organization Unit */
                assigned_organization_unit_id?: string | null;
                /** @description ID of the Assigned Organization User */
                assigned_organization_user_id?: string | null;
                /** @description ID of the Assigned Organization Group */
                assigned_organization_group_id?: string | null;
                /** @description Assigned Own Organization */
                assigned_own_organization?: boolean | null;
                /** @description Filter by cancelled agreements */
                cancelled?: boolean | null;
                /** @description Filter by agreement type category */
                category?: components["schemas"]["AgreementTypeCategory"] | null;
                /** @description A search query is used to search agreements using (agreement_type_name, ) */
                query?: string | null;
                /** @description Agreements Offset */
                offset?: number;
                /** @description Max number of Agreements */
                limit?: number;
                /** @description Attribute used to sort the Agreements: ['service_provider_id', 'agreement_type.name', 'effective_from_date', 'valid_until', 'status'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreements Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SCAgreementRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_read_service_consumers__service_consumer_id__agreements__agreement_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementReadExtended"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__policies_get: {
        parameters: {
            query?: {
                /** @description Optional Policies */
                optional_policies?: boolean | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyUsageRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement or Policies Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_cancel_service_consumers__service_consumer_id__agreements__agreement_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement Cancelled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Already Cancelled */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_contact_update_service_consumers__service_consumer_id__agreements__agreement_id__contact_update_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCAgreementContactUserUpdate"];
            };
        };
        responses: {
            /** @description Agreement Cancelled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Agreement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_org_groups_assigned_to_agreement_policies_service_consumers__service_consumer_id__agreements__agreement_id__organization_groups_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of Organization Group IDs */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Groups Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationGroupIDRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_organization_group_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__organization_groups__organization_group_id__policies_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementPoliciesRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_organization_group_policies_optional_update_service_consumers__service_consumer_id__agreements__agreement_id__organization_groups__organization_group_id__policies_optional_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementOptionalPoliciesUpdate"];
            };
        };
        responses: {
            /** @description Optional Policies Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementPoliciesRead"];
                };
            };
            /** @description Invalid Optional Policy IDs */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_agreement_policies_to_organization_group_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_group__organization_group_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the service consumer org */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description Id of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementOptionalPoliciesUpdate"];
            };
        };
        responses: {
            /** @description Policies Assigned to Organization Group */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationGroupPolicyAssignmentRead"][];
                };
            };
            /** @description Distribution not allowed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement or Optional Policies Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_agreement_policies_from_organization_group_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_group__organization_group_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the service consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description Id of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement's Policies from Organization Group Unassigned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid assignment */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_org_units_assigned_to_agreement_policies_service_consumers__service_consumer_id__agreements__agreement_id__organization_units_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of Organization Unit IDs */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Units Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationUnitIDRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_organization_unit_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__organization_units__organization_unit_id__policies_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Unit Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementPoliciesRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_organization_unit_policies_optional_update_service_consumers__service_consumer_id__agreements__agreement_id__organization_units__organization_unit_id__policies_optional_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementOptionalPoliciesUpdate"];
            };
        };
        responses: {
            /** @description Optional Policies Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementPoliciesRead"];
                };
            };
            /** @description Invalid Optional Policy IDs */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_agreement_policies_to_organization_unit_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_unit__organization_unit_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of service consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementOptionalPoliciesUpdate"];
            };
        };
        responses: {
            /** @description Policies Assigned to Organization Unit */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUnitPolicyAssignmentRead"][];
                };
            };
            /** @description Invalid Optional Policy IDs or Distribution Not Allowed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_agreement_policies_from_organization_unit_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_unit__organization_unit_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the service consumer organization */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description Id of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement's Policies from Organization Unit Unassigned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Assignment */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_org_users_assigned_to_agreement_policies_service_consumers__service_consumer_id__agreements__agreement_id__organization_users_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of Organization User IDs */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationUserIDRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_organization_user_policies_read_service_consumers__service_consumer_id__agreements__agreement_id__organization_users__organization_user_id__policies_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description ID of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementPoliciesRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_consumer_agreement_organization_user_policies_optional_update_service_consumers__service_consumer_id__agreements__agreement_id__organization_users__organization_user_id__policies_optional_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description ID of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementOptionalPoliciesUpdate"];
            };
        };
        responses: {
            /** @description Optional Policies Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementPoliciesRead"];
                };
            };
            /** @description Invalid Optional Policy IDs */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_agreement_policies_to_organization_user_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_user__organization_user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description Id of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementOptionalPoliciesUpdate"];
            };
        };
        responses: {
            /** @description Agreement Policies Assigned to Organization User */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserPolicyAssignmentRead"][];
                };
            };
            /** @description Invalid Agreement Type or Distribution not Allowed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement or Optional Policies not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_agreement_policies_from_organization_user_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_user__organization_user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
                /** @description Id of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement's Policies from Organization User UnAssigned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid assignment */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_agreements_assigned_to_organization_group_service_consumers__service_consumer_id__organization_groups__organization_group_id__agreements_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of Agreements */
                limit?: number;
                /** @description A search query is used to search agreements using (agreement_type.name, agreement_type.description) */
                query?: string | null;
                /** @description Filter by cancelled agreements */
                cancelled?: boolean | null;
                /** @description Filter by active agreements */
                active?: boolean | null;
                /** @description Filter by agreement type category */
                category?: components["schemas"]["AgreementTypeCategory"] | null;
                /** @description Attribute used to sort the Agreements: ['agreement.service_provider_id', 'agreement_type.name', 'agreement.effective_from_date', 'agreement.valid_until', 'agreement.status'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreements Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_SCAgreementRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_policies_assigned_to_organization_group_service_consumers__service_consumer_id__organization_groups__organization_group_id__policies_get: {
        parameters: {
            query?: {
                /** @description ID of the Agreement */
                agreement_id?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCPolicyRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_policies_assigned_to_organization_unit_service_consumers__service_consumer_id__organization_units__organization_unit_id__policies_get: {
        parameters: {
            query?: {
                /** @description ID of the Agreement */
                agreement_id?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Unit Polices Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCPolicyRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_policies_assigned_to_organization_user_service_consumers__service_consumer_id__organization_users__organization_user_id__policies_get: {
        parameters: {
            query?: {
                /** @description ID of the Agreement */
                agreement_id?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCPolicyRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organization_user_external_policies_by_service_consumer_id_service_consumers__service_consumer_id__policies_external_organization_users_get: {
        parameters: {
            query?: {
                /** @description Filter by Organization user ID */
                organization_user_id?: string | null;
                /** @description Offset */
                offset?: number;
                /** @description Max number of policies to retrieve */
                limit?: number;
                /** @description A search query is used to search policies using (policy type name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policies: ['policy.owner_id', 'policy.assigned_by_id', 'policy.resource_owner_id', 'policy.type_id', 'policy.valid_from', 'policy.valid_until', 'policy.optional', 'policy.agreement_id', 'policy_type.name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of service consumer */
                service_consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User External Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_PolicyReadWithOwnerName_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_organization_external_policies_by_service_consumer_id_service_consumers__service_consumer_id__policies_external_organization_get: {
        parameters: {
            query?: {
                /** @description Offset */
                offset?: number;
                /** @description Max number of policies to retrieve */
                limit?: number;
                /** @description A search query is used to search policies using (policy type name, description, ) */
                query?: string | null;
                /** @description Attribute used to sort the Policies: ['policy.owner_id', 'policy.assigned_by_id', 'policy.resource_owner_id', 'policy.type_id', 'policy.valid_from', 'policy.valid_until', 'policy.optional', 'policy.agreement_id', 'policy_type.name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of service consumer */
                service_consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization External Policies Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_PolicyReadWithOwnerName_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_agreement_policies_to_service_consumer_organization_service_consumers__service_consumer_id__agreements__agreement_id__assign_to_organization_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementOptionalPoliciesUpdate"];
            };
        };
        responses: {
            /** @description Agreement's Policy Assignments to Organization Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationPolicyAssignmentRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement or Optional Policies not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unassign_agreement_policies_from_organization_service_consumers__service_consumer_id__agreements__agreement_id__unassign_from_organization_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the service consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_sc_agreement_billing_status_to_processing_service_consumers__service_consumer_id__agreements__agreement_id__billing_status_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgreementBillingStatusUpdate"];
            };
        };
        responses: {
            /** @description Agreement billing status updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_sc_agreement_legal_document_status_status_to_processing_service_consumers__service_consumer_id__agreements__agreement_id__legal_document_status_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
                /** @description ID of the Agreement */
                agreement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agreement legal document status updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCAgreementRead"];
                };
            };
            /** @description Legal document status not editable */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agreement not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    policy_categories_read_policy_type_categories_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Policy Categories Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyCategoryReadLimited"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    policy_category_ux_behaviour_read_policy_type_categories__policy_category_id__ux_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Policy Category */
                policy_category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description UX Behaviour Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UXBehaviour"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Policy Category */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_access_read_service_consumers__service_consumer_id__user_access_get: {
        parameters: {
            query: {
                /** @description Organization User ID */
                organization_user_id: string;
                /** @description Organization Group IDs */
                organization_group_ids?: string[] | null;
                /** @description Organization Unit ID */
                organization_unit_id?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Consumer */
                service_consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Access Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccess"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    load_data_load__dataset_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unload_e2e_unload_e2e_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
