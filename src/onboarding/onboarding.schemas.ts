/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users": {
    /** Creates a User */
    post: operations["users_create_users_post"];
  };
  "/users/{user_id}": {
    /**
     * Deletes an user
     * @description Delete an user and the organization associated with user id.
     */
    delete: operations["user_delete_users__user_id__delete"];
    /** Updates a User */
    patch: operations["user_edit_users__user_id__patch"];
  };
  "/users/@me/consents": {
    /**
     * Read User Consent
     * @description Read User Consent
     */
    get: operations["user_consent_read_users__me_consents_get"];
    /**
     * Update User Consent
     * @description Update User Consent
     */
    patch: operations["user_consent_update_users__me_consents_patch"];
  };
  "/users/@me/consents/{service_provider_id}": {
    /**
     * Read User Consent Given to Service Provider
     * @description Read User Consent Given to Service Provider
     */
    get: operations["user_consent_for_service_provider_read_users__me_consents__service_provider_id__get"];
    /**
     * Delete User Consent Given to Service Provider
     * @description Delete User Consent Given to Service Provider
     */
    delete: operations["user_consent_for_service_provider_delete_users__me_consents__service_provider_id__delete"];
  };
  "/organizations/{organization_id}/consents": {
    /**
     * Read Organization Consents
     * @description Read Organization Consents
     */
    get: operations["organization_consents_read_organizations__organization_id__consents_get"];
    /**
     * Update Organization Consent
     * @description Update Organization Consent
     */
    patch: operations["organization_consent_update_organizations__organization_id__consents_patch"];
  };
  "/organizations/{organization_id}/consents/{service_provider_id}": {
    /**
     * Read Organization Consents for Service Provider
     * @description Read Organization Consents for Service Provider
     */
    get: operations["organization_consents_for_service_provider_read_organizations__organization_id__consents__service_provider_id__get"];
    /**
     * Delete Organization Consents for Service Provider
     * @description Delete Organization Consents for Service Provider
     */
    delete: operations["organization_consents_for_service_provider_delete_organizations__organization_id__consents__service_provider_id__delete"];
  };
  "/organizations": {
    /** Creates an Organization */
    post: operations["organizations_create_organizations_post"];
  };
  "/organizations/{organization_id}": {
    /** Updates an Organization */
    patch: operations["organization_patch_organizations__organization_id__patch"];
  };
  "/flow": {
    /** Retrieves the Onboarding Flow for the authenticated User */
    get: operations["flow_read_flow_get"];
  };
  "/agreement-types": {
    /** Creates an agreement type */
    post: operations["create_agreement_type_agreement_types_post"];
  };
  "/agreement-types/{agreement_type_id}": {
    /** Updates an agreement type */
    put: operations["update_agreement_type_agreement_types__agreement_type_id__put"];
  };
  "/service-providers/{service_provider_id}/attribute-sets": {
    /** Returns the Attribute Sets that belong to a Service Provider */
    get: operations["get_attribute_sets_service_providers__service_provider_id__attribute_sets_get"];
    /** Creates an Attribute Set for a Service Provider */
    post: operations["attribute_sets_create_service_providers__service_provider_id__attribute_sets_post"];
  };
  "/service-providers/{service_provider_id}/attribute-sets/{attribute_set_id}": {
    /** Read an Attribute Set */
    get: operations["attribute_set_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__get"];
    /** Deletes an Attribute Set */
    delete: operations["attribute_set_delete_service_providers__service_provider_id__attribute_sets__attribute_set_id__delete"];
    /** Updates an Attribute Set */
    patch: operations["attribute_set_edit_service_providers__service_provider_id__attribute_sets__attribute_set_id__patch"];
  };
  "/service-providers/{service_provider_id}/attribute-sets/{attribute_set_id}/usage": {
    /** Returns the OAuth Clients used by an Attribute Set */
    get: operations["attribute_set_usage_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__usage_get"];
  };
  "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/organization_attribute_set": {
    /** Assigns an Organization Attribute Set to an OAuth Client */
    put: operations["oauth_client_update_organization_attribute_set_service_providers__service_provider_id__oauth_clients__oauth_client_id__organization_attribute_set_put"];
    /** Unassign Organization Attribute Set From OAuth Client */
    delete: operations["oauth_client_organization_attribute_set_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__organization_attribute_set_delete"];
  };
  "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/user_attribute_set": {
    /** Assigns an User Attribute Set to an OAuth Client */
    put: operations["oauth_client_update_user_attribute_set_service_providers__service_provider_id__oauth_clients__oauth_client_id__user_attribute_set_put"];
    /** Unassign User Attribute Set From OAuth Client */
    delete: operations["oauth_client_user_attribute_set_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__user_attribute_set_delete"];
  };
  "/service-providers/{service_provider_id}/global-oauth-client-settings": {
    /** Gets the Global OAuth Client Settings */
    get: operations["oauth_client_get_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_get"];
    /** Updates the Global OAuth Client Settings */
    put: operations["oauth_client_update_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_put"];
  };
  "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}": {
    /** Read OAuth Client */
    get: operations["oauth_client_read_service_providers__service_provider_id__oauth_clients__oauth_client_id__get"];
  };
  "/attribute-types": {
    /** Fetches all Attribute Types */
    get: operations["get_all_attribute_types_attribute_types_get"];
    /** Creates an Attribute Type */
    post: operations["create_attribute_type_attribute_types_post"];
  };
  "/attribute-types/{attribute_type_id}": {
    /** Fetches an Attribute Type */
    get: operations["get_attribute_type_attribute_types__attribute_type_id__get"];
    /** Deletes an Attribute Type */
    delete: operations["delete_attribute_type_attribute_types__attribute_type_id__delete"];
    /** Updates an Attribute Type */
    patch: operations["update_attribute_type_attribute_types__attribute_type_id__patch"];
  };
  "/service-providers/{service_provider_id}/attribute-types": {
    /** Fetches all Attribute Types available to a Service Provider */
    get: operations["get_all_attribute_types_for_service_provider_service_providers__service_provider_id__attribute_types_get"];
  };
  "/service-providers/{service_provider_id}/attribute-types/{attribute_type_id}": {
    /** Fetches an Attribute Type available to a Service Provider */
    get: operations["get_attribute_type_service_providers__service_provider_id__attribute_types__attribute_type_id__get"];
  };
  "/welcome/{app}/{component}": {
    /** Creates a User Welcome Component */
    post: operations["user_welcome_component_create_welcome__app___component__post"];
    /** Deletes a User Welcome Component */
    delete: operations["user_welcome_component_delete_welcome__app___component__delete"];
  };
  "/welcome/{app}": {
    /** Retrieves Welcome Components */
    get: operations["welcome_components_app_read_welcome__app__get"];
  };
  "/load/{dataset_id}": {
    /**
     * Load Data
     * @description Loads initial dataset in DEBUG / Dev Environment.
     * Not usable for (pre-)production
     * The dataset id corresponds with the datasets in the tests part of the project
     */
    get: operations["load_data_load__dataset_id__get"];
  };
  "/unload/e2e": {
    /** Unload E2E */
    get: operations["unload_e2e_unload_e2e_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AgreementTypeCreate */
    AgreementTypeCreate: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Service Provider Id
       * Format: uuid
       */
      service_provider_id: string;
      /**
       * Include In Self Service
       * @default false
       */
      include_in_self_service?: boolean;
      /** Self Service Order */
      self_service_order?: number | null;
      /**
       * Legal Documents Required
       * @default false
       */
      legal_documents_required?: boolean;
      /**
       * Payment Required
       * @default false
       */
      payment_required?: boolean;
    };
    /** AgreementTypeUpdate */
    AgreementTypeUpdate: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Include In Self Service
       * @default false
       */
      include_in_self_service?: boolean;
      /** Self Service Order */
      self_service_order?: number | null;
    };
    /** AttributeConsent */
    AttributeConsent: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Granted */
      granted: boolean;
    };
    /**
     * AttributeSetAttributesOf
     * @enum {string}
     */
    AttributeSetAttributesOf: "ORGANIZATION" | "USER";
    /** AttributeSetCreate */
    AttributeSetCreate: {
      /** Name */
      name: string;
      type: components["schemas"]["AttributeSetAttributesOf"];
      /** Description */
      description?: string | null;
      /** Id */
      id?: string | null;
      /** Required Attribute Types */
      required_attribute_types?: string[] | null;
      /** Optional Attribute Types */
      optional_attribute_types?: string[] | null;
    };
    /** AttributeSetRead */
    AttributeSetRead: {
      /** Name */
      name: string;
      type: components["schemas"]["AttributeSetAttributesOf"];
      /** Description */
      description?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** AttributeSetUpdate */
    AttributeSetUpdate: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Required Attribute Types */
      required_attribute_types?: string[] | null;
      /** Optional Attribute Types */
      optional_attribute_types?: string[] | null;
    };
    /** AttributeSetWithAttributeTypesRead */
    AttributeSetWithAttributeTypesRead: {
      /** Name */
      name: string;
      type: components["schemas"]["AttributeSetAttributesOf"];
      /** Description */
      description?: string | null;
      /** Id */
      id?: string | null;
      /** Required Attribute Types */
      required_attribute_types?: string[] | null;
      /** Optional Attribute Types */
      optional_attribute_types?: string[] | null;
    };
    /** AttributeSetWithCountsRead */
    AttributeSetWithCountsRead: {
      /** Name */
      name: string;
      type: components["schemas"]["AttributeSetAttributesOf"];
      /** Description */
      description?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Required Attribute Types Count */
      required_attribute_types_count: number;
      /** Optional Attribute Types Count */
      optional_attribute_types_count: number;
    };
    /** AttributeTypeCreate */
    AttributeTypeCreate: {
      attribute_of: components["schemas"]["AttributeSetAttributesOf"];
      data_type: components["schemas"]["DataType"];
      /** Name */
      name: string;
      /** Enabled */
      enabled?: boolean | null;
      /** Organization Attribute */
      organization_attribute?: boolean | null;
      restrictions?: components["schemas"]["AttributeTypeRestrictionsSchema"] | null;
    };
    /** AttributeTypeRead */
    AttributeTypeRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      attribute_of: components["schemas"]["AttributeSetAttributesOf"];
      data_type: components["schemas"]["DataType"];
      /** Name */
      name: string;
      /** Enabled */
      enabled: boolean;
      /** Organization Attribute */
      organization_attribute: boolean;
      /** Restrictions */
      restrictions?: Record<string, never> | null;
    };
    /** AttributeTypeRestrictionsSchema */
    AttributeTypeRestrictionsSchema: {
      /** Max Length */
      max_length?: number | null;
      /** Min Length */
      min_length?: number | null;
      /** Options */
      options?: unknown[] | null;
    };
    /** AttributeTypeUpdate */
    AttributeTypeUpdate: {
      /** Name */
      name?: string | null;
      /** Enabled */
      enabled?: boolean | null;
      /** Organization Attribute */
      organization_attribute?: boolean | null;
    };
    /** AttributesConsentRead */
    AttributesConsentRead: {
      type: components["schemas"]["IdNameSchema"];
      /** Granted */
      granted: boolean;
      /**
       * Consent Date
       * Format: date-time
       */
      consent_date: string;
    };
    /** AttributesConsentUpdate */
    AttributesConsentUpdate: {
      /** Attributes */
      attributes: components["schemas"]["AttributeConsent"][];
    };
    /** AttributesConsentsRead */
    AttributesConsentsRead: {
      /** Attributes */
      attributes: components["schemas"]["AttributesConsentRead"][];
    };
    /** ComponentsRead */
    ComponentsRead: {
      component: components["schemas"]["WelcomeComponent"];
      /** Completed */
      completed: boolean;
    };
    /**
     * DataType
     * @enum {string}
     */
    DataType: "uuid" | "string" | "datetime" | "date" | "boolean" | "enum" | "integer";
    /**
     * FlowComponent
     * @enum {string}
     */
    FlowComponent: "CreateAccount" | "UserDetails" | "JoinedOrganization" | "CreateOrganization" | "UpdateOrganization" | "RequestOrganizationAccess" | "ChoosePlan" | "PlanCheckout";
    /** FlowSchema */
    FlowSchema: {
      /**
       * Completed
       * @default false
       */
      completed?: boolean;
      /**
       * Completed User
       * @default false
       */
      completed_user?: boolean;
      /**
       * Completed Organization
       * @default false
       */
      completed_organization?: boolean;
      /**
       * Stages
       * @default []
       */
      stages?: components["schemas"]["FlowStageSchema"][];
      /** Organization Id */
      organization_id?: string | null;
    };
    /** FlowStageSchema */
    FlowStageSchema: {
      /** Index */
      index: number;
      /** Title */
      title: string;
      /**
       * Active
       * @default false
       */
      active?: boolean;
      component: components["schemas"]["FlowComponent"];
      /**
       * Completed
       * @default false
       */
      completed?: boolean;
      /**
       * Data
       * @default {}
       */
      data?: Record<string, never>;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** IdNameSchema */
    IdNameSchema: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
    };
    /**
     * Industry
     * @enum {string}
     */
    Industry: "SAA" | "ESG" | "COM" | "HEA" | "FIN" | "DIG" | "OTH" | "SAAS" | "COMMERCE" | "HEALTHCARE" | "FINANCIAL_SERVICES" | "DIGITAL_PRODUCTS" | "OTHER";
    /**
     * JobRole
     * @enum {string}
     */
    JobRole: "MAR" | "SAL" | "DEV" | "PRO" | "CUS" | "EXE" | "FIN" | "MARKETING" | "SALES" | "DEVELOPMENT" | "PRODUCT" | "CUSTOMER_SUPPORT" | "EXECUTIVE_MANAGEMENT" | "FINANCE" | "OTHER";
    /**
     * NumberOfEmployees
     * @enum {string}
     */
    NumberOfEmployees: "1-10" | "11-50" | "51-200" | "201-999" | "1000+";
    /** OAuthClientBaseRead */
    OAuthClientBaseRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Service Provider Id
       * Format: uuid
       */
      service_provider_id: string;
    };
    /** OAuthClientGlobalRead */
    OAuthClientGlobalRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Service Provider Id
       * Format: uuid
       */
      service_provider_id: string;
      /** User Attribute Set Id */
      user_attribute_set_id?: string | null;
      /** Organization Attribute Set Id */
      organization_attribute_set_id?: string | null;
      /** Self Service */
      self_service: boolean;
      /** Self Service Redirect Url */
      self_service_redirect_url?: string | null;
    };
    /** OAuthClientGlobalSettingsRead */
    OAuthClientGlobalSettingsRead: {
      /** Self Service */
      self_service: boolean;
      /** Self Service Redirect Url */
      self_service_redirect_url?: string | null;
    };
    /** OAuthClientRead */
    OAuthClientRead: {
      /** User Attribute Set Id */
      user_attribute_set_id?: string | null;
      /** Organization Attribute Set Id */
      organization_attribute_set_id?: string | null;
      /** User Oauth Client Attribute Sets */
      user_oauth_client_attribute_sets?: components["schemas"]["OauthClientAttributeSetRead"][] | null;
      /** Organization Oauth Client Attribute Sets */
      organization_oauth_client_attribute_sets?: components["schemas"]["OauthClientAttributeSetRead"][] | null;
    };
    /** OAuthClientUpdate */
    OAuthClientUpdate: {
      /** Self Service */
      self_service: boolean;
      /**
       * Self Service Redirect Url
       * @default false
       */
      self_service_redirect_url?: string | null;
    };
    /** OauthClientAttributeSetRead */
    OauthClientAttributeSetRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Attribute Set Id
       * Format: uuid
       */
      attribute_set_id: string;
    };
    /** OrganizationAttributeSet */
    OrganizationAttributeSet: {
      /**
       * Organization Attribute Set Id
       * Format: uuid
       */
      organization_attribute_set_id: string;
    };
    /** OrganizationCreate */
    OrganizationCreate: {
      /** Name */
      name: string;
      industry?: components["schemas"]["Industry"] | null;
      number_of_employees_range?: components["schemas"]["NumberOfEmployees"] | null;
      /** Auto Joined Enabled */
      auto_joined_enabled: boolean;
      /** Attributes */
      attributes?: Record<string, never> | null;
    };
    /** OrganizationRead */
    OrganizationRead: {
      /** Name */
      name: string;
      industry?: components["schemas"]["Industry"] | null;
      number_of_employees_range?: components["schemas"]["NumberOfEmployees"] | null;
      /** Auto Joined Enabled */
      auto_joined_enabled?: boolean | null;
      /** Attributes */
      attributes?: Record<string, never> | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** OrganizationUpdate */
    OrganizationUpdate: {
      /** Name */
      name?: string | null;
      industry?: components["schemas"]["Industry"] | null;
      number_of_employees_range?: components["schemas"]["NumberOfEmployees"] | null;
      /**
       * Auto Joined Enabled
       * @default false
       */
      auto_joined_enabled?: boolean | null;
      /** Attributes */
      attributes?: Record<string, never> | null;
    };
    /** PaginationSchema[AttributeSetWithCountsRead] */
    PaginationSchema_AttributeSetWithCountsRead_: {
      /** Offset */
      offset: number;
      /** Limit */
      limit: number;
      /** Results */
      results: components["schemas"]["AttributeSetWithCountsRead"][];
      /** Size */
      size: number;
      /** Total */
      total?: number | null;
    };
    /** PaginationSchema[AttributeTypeRead] */
    PaginationSchema_AttributeTypeRead_: {
      /** Offset */
      offset: number;
      /** Limit */
      limit: number;
      /** Results */
      results: components["schemas"]["AttributeTypeRead"][];
      /** Size */
      size: number;
      /** Total */
      total?: number | null;
    };
    /** PaginationSchema[OAuthClientBaseRead] */
    PaginationSchema_OAuthClientBaseRead_: {
      /** Offset */
      offset: number;
      /** Limit */
      limit: number;
      /** Results */
      results: components["schemas"]["OAuthClientBaseRead"][];
      /** Size */
      size: number;
      /** Total */
      total?: number | null;
    };
    /** ServiceProviderAttributesConsentsRead */
    ServiceProviderAttributesConsentsRead: {
      /** Attributes */
      attributes: components["schemas"]["AttributesConsentRead"][];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Consent Date
       * Format: date-time
       */
      consent_date: string;
      /** Name */
      name: string;
    };
    /** ServiceProvidersAttributesConsentsRead */
    ServiceProvidersAttributesConsentsRead: {
      /** Service Providers */
      service_providers: components["schemas"]["ServiceProviderAttributesConsentsRead"][];
    };
    /** UserAttributeSet */
    UserAttributeSet: {
      /**
       * User Attribute Set Id
       * Format: uuid
       */
      user_attribute_set_id: string;
    };
    /** UserCreate */
    UserCreate: {
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      job_role?: components["schemas"]["JobRole"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Organizations */
      organizations?: components["schemas"]["UserOrganization"][] | null;
      /** Attributes */
      attributes?: Record<string, never> | null;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /**
       * Service Provider Id
       * Format: uuid
       */
      service_provider_id: string;
      /**
       * Oauth Client Id
       * Format: uuid
       */
      oauth_client_id: string;
    };
    /** UserOrganization */
    UserOrganization: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Admin */
      admin: boolean;
      /** Joined */
      joined: boolean;
      /** Attributes */
      attributes?: Record<string, never> | null;
    };
    /** UserRead */
    UserRead: {
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      job_role?: components["schemas"]["JobRole"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Organizations */
      organizations?: components["schemas"]["UserOrganization"][] | null;
      /** Attributes */
      attributes?: Record<string, never> | null;
      /** Email Private */
      email_private: boolean;
    };
    /** UserUpdate */
    UserUpdate: {
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      job_role?: components["schemas"]["JobRole"] | null;
      /** Sync Code */
      sync_code?: string | null;
      /** Attributes */
      attributes?: Record<string, never> | null;
    };
    /** UserWelcomeComponentRead */
    UserWelcomeComponentRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /**
       * Welcome Component Id
       * Format: uuid
       */
      welcome_component_id: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * WelcomeApp
     * @enum {string}
     */
    WelcomeApp: "sc" | "sp";
    /**
     * WelcomeComponent
     * @enum {string}
     */
    WelcomeComponent: "ConnectYourApplication" | "ConfigureAccessRequirements" | "IntegrateAndGoLive" | "AddYourCustomers" | "SetupYourOrganization" | "InviteYourColleagues" | "SetupOrganizationStructure" | "ViewLicensesAndPolicies" | "ConfigurePlans" | "SetupPricingPage" | "ViewAccessToProviders";
    /** WelcomeComponentsRead */
    WelcomeComponentsRead: {
      /** Components */
      components: components["schemas"]["ComponentsRead"][];
      /** Completed */
      completed: boolean;
      /** Completed Percentage */
      completed_percentage: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Creates a User */
  users_create_users_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Deletes an user
   * @description Delete an user and the organization associated with user id.
   */
  user_delete_users__user_id__delete: {
    parameters: {
      path: {
        /** @description ID of the User */
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Updates a User */
  user_edit_users__user_id__patch: {
    parameters: {
      path: {
        /** @description ID of the User */
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User Consent
   * @description Read User Consent
   */
  user_consent_read_users__me_consents_get: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceProvidersAttributesConsentsRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
    };
  };
  /**
   * Update User Consent
   * @description Update User Consent
   */
  user_consent_update_users__me_consents_patch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttributesConsentUpdate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["AttributesConsentsRead"];
        };
      };
      /** @description Required Attributes NOT Granted or Missing Attributes */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Invalid Attribute or Missing Attributes */
      422: {
        content: never;
      };
    };
  };
  /**
   * Read User Consent Given to Service Provider
   * @description Read User Consent Given to Service Provider
   */
  user_consent_for_service_provider_read_users__me_consents__service_provider_id__get: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceProviderAttributesConsentsRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description No User Consent Records Found for Service Provider */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User Consent Given to Service Provider
   * @description Delete User Consent Given to Service Provider
   */
  user_consent_for_service_provider_delete_users__me_consents__service_provider_id__delete: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
      };
    };
    responses: {
      /** @description Success */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description No User Consent Records Found for Service Provider */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read Organization Consents
   * @description Read Organization Consents
   */
  organization_consents_read_organizations__organization_id__consents_get: {
    parameters: {
      path: {
        /** @description ID of the Organization */
        organization_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceProvidersAttributesConsentsRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Organization Consent
   * @description Update Organization Consent
   */
  organization_consent_update_organizations__organization_id__consents_patch: {
    parameters: {
      path: {
        /** @description ID of the Organization */
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttributesConsentUpdate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["AttributesConsentsRead"];
        };
      };
      /** @description Required Attributes NOT Granted or Missing Attributes */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Invalid Attribute or Missing Attributes */
      422: {
        content: never;
      };
    };
  };
  /**
   * Read Organization Consents for Service Provider
   * @description Read Organization Consents for Service Provider
   */
  organization_consents_for_service_provider_read_organizations__organization_id__consents__service_provider_id__get: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Organization */
        organization_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceProviderAttributesConsentsRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description No consents Found For Service Provider */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Organization Consents for Service Provider
   * @description Delete Organization Consents for Service Provider
   */
  organization_consents_for_service_provider_delete_organizations__organization_id__consents__service_provider_id__delete: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Organization */
        organization_id: string;
      };
    };
    responses: {
      /** @description Success */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description No consents Found For Service Provider */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Creates an Organization */
  organizations_create_organizations_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Updates an Organization */
  organization_patch_organizations__organization_id__patch: {
    parameters: {
      path: {
        /** @description ID of the Organization */
        organization_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieves the Onboarding Flow for the authenticated User */
  flow_read_flow_get: {
    parameters: {
      query?: {
        /** @description When provided, checks if the user data has been synced with IAM */
        sync_code?: string | null;
        /** @description The stage index of Flow which the User is on now */
        stage_index?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FlowSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Creates an agreement type */
  create_agreement_type_agreement_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AgreementTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Updates an agreement type */
  update_agreement_type_agreement_types__agreement_type_id__put: {
    parameters: {
      path: {
        /** @description ID of Agreement type */
        agreement_type_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AgreementTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Returns the Attribute Sets that belong to a Service Provider */
  get_attribute_sets_service_providers__service_provider_id__attribute_sets_get: {
    parameters: {
      query?: {
        /** @description ID of the OAuth Client */
        oauth_client_id?: string | null;
        /** @description Attribute of filter for Attribute Sets */
        attribute_of?: components["schemas"]["AttributeSetAttributesOf"] | null;
        /** @description Service Provider Attribute Sets Offset */
        offset?: number;
        /** @description Max number of Service Provider Attribute Sets */
        limit?: number;
        /** @description Term to search for in the Attribute Sets */
        query?: string | null;
      };
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
      };
    };
    responses: {
      /** @description Attribute Set Successfully returned */
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSchema_AttributeSetWithCountsRead_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Creates an Attribute Set for a Service Provider */
  attribute_sets_create_service_providers__service_provider_id__attribute_sets_post: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttributeSetCreate"];
      };
    };
    responses: {
      /** @description Attribute Set Created */
      201: {
        content: {
          "application/json": components["schemas"]["AttributeSetRead"];
        };
      };
      /** @description Missing or Invalid Attribute Types */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Duplicate - Attribute Type exists with this name for this Service Provider */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read an Attribute Set */
  attribute_set_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__get: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Attribute Set */
        attribute_set_id: string;
      };
    };
    responses: {
      /** @description Attribute Set Read */
      200: {
        content: {
          "application/json": components["schemas"]["AttributeSetWithAttributeTypesRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Missing Service Provider or Attribute Set */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Deletes an Attribute Set */
  attribute_set_delete_service_providers__service_provider_id__attribute_sets__attribute_set_id__delete: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Attribute Set */
        attribute_set_id: string;
      };
    };
    responses: {
      /** @description Attribute Set Deleted */
      204: {
        content: never;
      };
      /** @description Attribute Set associated with OAuth Client */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Attribute Set */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Updates an Attribute Set */
  attribute_set_edit_service_providers__service_provider_id__attribute_sets__attribute_set_id__patch: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Attribute Set */
        attribute_set_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttributeSetUpdate"];
      };
    };
    responses: {
      /** @description Attribute Set Updated */
      200: {
        content: {
          "application/json": components["schemas"]["AttributeSetRead"];
        };
      };
      /** @description Missing or Invalid Attribute Types */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Attribute Set not Found */
      404: {
        content: never;
      };
      /** @description Duplicate - Attribute Type exists with this name for this Service Provider */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Returns the OAuth Clients used by an Attribute Set */
  attribute_set_usage_read_service_providers__service_provider_id__attribute_sets__attribute_set_id__usage_get: {
    parameters: {
      query?: {
        /** @description Related OAuth Clients Offset */
        offset?: number;
        /** @description Max number of Related OAuth Clients */
        limit?: number;
      };
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Attribute Set */
        attribute_set_id: string;
      };
    };
    responses: {
      /** @description Attribute Set Usage Successfully read */
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSchema_OAuthClientBaseRead_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Attribute Set */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Assigns an Organization Attribute Set to an OAuth Client */
  oauth_client_update_organization_attribute_set_service_providers__service_provider_id__oauth_clients__oauth_client_id__organization_attribute_set_put: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the OAuth Client */
        oauth_client_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationAttributeSet"];
      };
    };
    responses: {
      /** @description OAuth Client Updated */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthClientRead"];
        };
      };
      /** @description Missing or Invalid Organization Attribute Set */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Unassign Organization Attribute Set From OAuth Client */
  oauth_client_organization_attribute_set_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__organization_attribute_set_delete: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the OAuth Client */
        oauth_client_id: string;
      };
    };
    responses: {
      /** @description Success */
      204: {
        content: never;
      };
      /** @description OAuth Client has no Organization Attribute Set */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Oauth Client Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Assigns an User Attribute Set to an OAuth Client */
  oauth_client_update_user_attribute_set_service_providers__service_provider_id__oauth_clients__oauth_client_id__user_attribute_set_put: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the OAuth Client */
        oauth_client_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserAttributeSet"];
      };
    };
    responses: {
      /** @description OAuth Client Updated */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthClientRead"];
        };
      };
      /** @description Missing or Invalid User Attribute Set */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Unassign User Attribute Set From OAuth Client */
  oauth_client_user_attribute_set_delete_service_providers__service_provider_id__oauth_clients__oauth_client_id__user_attribute_set_delete: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the OAuth Client */
        oauth_client_id: string;
      };
    };
    responses: {
      /** @description Success */
      204: {
        content: never;
      };
      /** @description OAuth Client has no User Attribute Set */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Oauth Client Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Gets the Global OAuth Client Settings */
  oauth_client_get_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_get: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
      };
    };
    responses: {
      /** @description OAuth Client Updated */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthClientGlobalSettingsRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description No OAuth Clients */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Updates the Global OAuth Client Settings */
  oauth_client_update_global_oauth_client_settings_service_providers__service_provider_id__global_oauth_client_settings_put: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuthClientUpdate"];
      };
    };
    responses: {
      /** @description OAuth Client Updated */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthClientGlobalRead"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description No OAuth Clients */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read OAuth Client */
  oauth_client_read_service_providers__service_provider_id__oauth_clients__oauth_client_id__get: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the OAuth Client */
        oauth_client_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthClientRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Oauth Client Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Fetches all Attribute Types */
  get_all_attribute_types_attribute_types_get: {
    parameters: {
      query?: {
        /** @description Term to search for in the Attribute Types */
        query?: string | null;
        /** @description Attribute of filter for Attribute Types */
        attribute_of?: components["schemas"]["AttributeSetAttributesOf"] | null;
        /** @description Attribute set to exclude assigned Attribute types */
        exclude_in_attribute_set_id?: string | null;
        /** @description Attribute Types Offset */
        offset?: number;
        /** @description Max number of Attribute Types */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSchema_AttributeTypeRead_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Creates an Attribute Type */
  create_attribute_type_attribute_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttributeTypeCreate"];
      };
    };
    responses: {
      /** @description Attribute Type Created */
      201: {
        content: {
          "application/json": components["schemas"]["AttributeTypeRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Other AttributeType exists with this name */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Fetches an Attribute Type */
  get_attribute_type_attribute_types__attribute_type_id__get: {
    parameters: {
      path: {
        /** @description ID of the Attribute Type */
        attribute_type_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["AttributeTypeRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Attribute Type not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Deletes an Attribute Type */
  delete_attribute_type_attribute_types__attribute_type_id__delete: {
    parameters: {
      path: {
        /** @description ID of the Attribute Type */
        attribute_type_id: string;
      };
    };
    responses: {
      /** @description Attribute Type Deleted */
      204: {
        content: never;
      };
      /** @description Attribute Type in use in Attribute Sets */
      400: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Attribute Type not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Updates an Attribute Type */
  update_attribute_type_attribute_types__attribute_type_id__patch: {
    parameters: {
      path: {
        /** @description ID of the Attribute Type */
        attribute_type_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttributeTypeUpdate"];
      };
    };
    responses: {
      /** @description Attribute Type Updated */
      200: {
        content: {
          "application/json": components["schemas"]["AttributeTypeRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Attribute Type not found */
      404: {
        content: never;
      };
      /** @description Other Attribute Type exists with this name */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Fetches all Attribute Types available to a Service Provider */
  get_all_attribute_types_for_service_provider_service_providers__service_provider_id__attribute_types_get: {
    parameters: {
      query?: {
        /** @description Term to search for in the Attribute Types */
        query?: string | null;
        /** @description Attribute of filter for Attribute Types */
        attribute_of?: components["schemas"]["AttributeSetAttributesOf"] | null;
        /** @description Attribute set to exclude assigned Attribute types */
        exclude_in_attribute_set_id?: string | null;
        /** @description Attribute Types Offset */
        offset?: number;
        /** @description Max number of Attribute Types */
        limit?: number;
      };
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSchema_AttributeTypeRead_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Fetches an Attribute Type available to a Service Provider */
  get_attribute_type_service_providers__service_provider_id__attribute_types__attribute_type_id__get: {
    parameters: {
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Attribute Type */
        attribute_type_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["AttributeTypeRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Attribute Type not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Creates a User Welcome Component */
  user_welcome_component_create_welcome__app___component__post: {
    parameters: {
      path: {
        /** @description App */
        app: components["schemas"]["WelcomeApp"];
        /** @description Component */
        component: components["schemas"]["WelcomeComponent"];
      };
    };
    responses: {
      /** @description User Welcome Component Created */
      201: {
        content: {
          "application/json": components["schemas"]["UserWelcomeComponentRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Missing Welcome Component with App and Component */
      404: {
        content: never;
      };
      /** @description Duplicate User Welcome Component for App and Component */
      409: {
        content: never;
      };
      /** @description Unprocessable due to Invalid App or Component */
      422: {
        content: never;
      };
    };
  };
  /** Deletes a User Welcome Component */
  user_welcome_component_delete_welcome__app___component__delete: {
    parameters: {
      path: {
        /** @description App */
        app: components["schemas"]["WelcomeApp"];
        /** @description Component */
        component: components["schemas"]["WelcomeComponent"];
      };
    };
    responses: {
      /** @description User Welcome Component Deleted */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Missing Welcome Component with App, Component and User */
      404: {
        content: never;
      };
      /** @description Duplicate User Welcome Component for App and Component */
      409: {
        content: never;
      };
      /** @description Unprocessable due to Invalid App or Component */
      422: {
        content: never;
      };
    };
  };
  /** Retrieves Welcome Components */
  welcome_components_app_read_welcome__app__get: {
    parameters: {
      path: {
        /** @description App */
        app: components["schemas"]["WelcomeApp"];
      };
    };
    responses: {
      /** @description Welcome Components Retrieved */
      200: {
        content: {
          "application/json": components["schemas"]["WelcomeComponentsRead"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Unprocessable due to Invalid App */
      422: {
        content: never;
      };
    };
  };
  /**
   * Load Data
   * @description Loads initial dataset in DEBUG / Dev Environment.
   * Not usable for (pre-)production
   * The dataset id corresponds with the datasets in the tests part of the project
   */
  load_data_load__dataset_id__get: {
    parameters: {
      path: {
        dataset_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Unload E2E */
  unload_e2e_unload_e2e_get: {
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
    };
  };
}
