/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/load/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Load Data
         * @description Loads initial dataset in DEBUG / Dev Environment.
         *     Not usable for (pre-)production
         *     The dataset id corresponds with the datasets in the tests part of the project
         */
        get: operations["load_data_load__dataset_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unload/graphql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Unload Graphql */
        get: operations["unload_graphql_unload_graphql_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Events */
        get: operations["events_read_events_get"];
        put?: never;
        /** Creates an Event */
        post: operations["events_create_events_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Event Types */
        get: operations["event_types_read_event_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Audit Events */
        get: operations["audit_events_read_audit_events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreements-metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve metrics for agreements */
        get: operations["agreement_metrics_read_service_providers__service_provider_id__agreements_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/agreement-types/{agreement_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve metrics for agreement type */
        get: operations["agreement_types_metrics_read_service_providers__service_provider_id__agreement_types__agreement_type_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/invoices-metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve metrics for Invoices */
        get: operations["invoices_metrics_read_service_providers__service_provider_id__invoices_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/charge-metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve metrics for Charges */
        get: operations["charge_metrics_read_service_providers__service_provider_id__charge_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/customer-organization-metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve metrics for customer organization */
        get: operations["customer_organization_metrics_read_service_providers__service_provider_id__customer_organization_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AgreementMetricsRead */
        AgreementMetricsRead: {
            /** End Date Active Agreements Count */
            end_date_active_agreements_count: number;
            /** Start Date Active Agreements Count */
            start_date_active_agreements_count: number;
            /** New Agreements In Time Period */
            new_agreements_in_time_period: number;
            /** New Agreements In Previous Time Period */
            new_agreements_in_previous_time_period: number;
            /** Cancelled Agreements In Time Period */
            cancelled_agreements_in_time_period: number;
            /** Cancelled Agreements In Previous Time Period */
            cancelled_agreements_in_previous_time_period: number;
            /** End Date Predicted Monthly Revenue */
            end_date_predicted_monthly_revenue: {
                [key: string]: number;
            };
            /** Start Date Predicted Monthly Revenue */
            start_date_predicted_monthly_revenue: {
                [key: string]: number;
            };
            /** New Agreement Monthly Revenue */
            new_agreement_monthly_revenue: {
                [key: string]: number;
            };
            /** Cancelled Agreement Monthly Revenue */
            cancelled_agreement_monthly_revenue: {
                [key: string]: number;
            };
        };
        /**
         * AgreementTypeCategory
         * @enum {string}
         */
        AgreementTypeCategory: "UNKNOWN" | "ACCESS" | "SUBSCRIPTION";
        /** AgreementTypeMetricsRead */
        AgreementTypeMetricsRead: {
            /** New Agreement Instances */
            new_agreement_instances: number;
            /** Cancelled Agreement Instances */
            cancelled_agreement_instances: number;
        };
        /**
         * AuditAction
         * @enum {string}
         */
        AuditAction: "CREATE" | "UPDATE" | "DELETE";
        /** AuditEventViewRead */
        AuditEventViewRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** User Id */
            user_id?: string | null;
            action: components["schemas"]["AuditAction"];
            resource: components["schemas"]["AuditResource"];
            /** Payload */
            payload?: Record<string, never> | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /** Oauth Client Id */
            oauth_client_id?: string | null;
            /** Organization Id */
            organization_id?: string | null;
            /** Service Provider User Id */
            service_provider_user_id?: string | null;
            /** User Name */
            user_name?: string | null;
            /** Organization Name */
            organization_name?: string | null;
            /** Oauth Client Name */
            oauth_client_name?: string | null;
            /** Service Provider Name */
            service_provider_name?: string | null;
        };
        /** AuditResource */
        AuditResource: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Type */
            type: string;
            /** Name */
            name?: string | null;
        };
        /**
         * BillingPeriodUnit
         * @enum {string}
         */
        BillingPeriodUnit: "DAY" | "WEEK" | "MONTH" | "YEAR";
        /**
         * BillingType
         * @enum {string}
         */
        BillingType: "FREE" | "ONCE_OFF" | "FLAT_FEE_RECURRING" | "SEAT_BASED_RECURRING" | "USER_BASED_RECURRING" | "TRANSACTION_BASED_RECURRING";
        /** ChargeMetricsRead */
        ChargeMetricsRead: {
            /** Total Amounts */
            total_amounts: {
                [key: string]: number;
            };
            /** Total Successful Amounts */
            total_successful_amounts: {
                [key: string]: number;
            };
            /** Total Failed Amounts */
            total_failed_amounts: {
                [key: string]: number;
            };
        };
        /**
         * Currency
         * @enum {string}
         */
        Currency: "EUR";
        /** CustomerOrganizationMetricsRead */
        CustomerOrganizationMetricsRead: {
            /** New Customer Organizations */
            new_customer_organizations: number;
            /** New Customer Organizations In Previous Time Period */
            new_customer_organizations_in_previous_time_period: number;
            /** Cancelled Customer Organizations */
            cancelled_customer_organizations: number;
            /** Start Date Active Customer Organizations */
            start_date_active_customer_organizations: number;
            /** End Date Active Customer Organizations */
            end_date_active_customer_organizations: number;
            /** End Date Total Cancelled Customer Organizations */
            end_date_total_cancelled_customer_organizations: number;
        };
        /** EventCreate */
        EventCreate: {
            type: components["schemas"]["EventType"];
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** User Id */
            user_id?: string | null;
            /** Organization Id */
            organization_id?: string | null;
            /** Oauth Client Id */
            oauth_client_id?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /** Service Provider User Id */
            service_provider_user_id?: string | null;
            /** Payload */
            payload?: components["schemas"]["EventPayloadId"] | components["schemas"]["EventPayloadRequest"] | components["schemas"]["EventPayloadSignup"] | components["schemas"]["EventPayloadAgreement"] | components["schemas"]["EventPayloadAgreementAssignment"] | components["schemas"]["EventPayloadPolicy"] | components["schemas"]["EventPayloadPolicyAssignment"] | components["schemas"]["EventPayloadAgreementOrganization"] | components["schemas"]["EventPayloadAgreementType"] | components["schemas"]["EventPayloadBillingAgreement"] | null;
        };
        /** EventPayloadAgreement */
        EventPayloadAgreement: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
            /** Service Consumer Id */
            service_consumer_id?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
        };
        /** EventPayloadAgreementAssignment */
        EventPayloadAgreementAssignment: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
            /** Service Consumer Id */
            service_consumer_id?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            /** Organization Id */
            organization_id?: string | null;
            /** Organization User Id */
            organization_user_id?: string | null;
            /** Organization Unit Id */
            organization_unit_id?: string | null;
            /** Organization Group Id */
            organization_group_id?: string | null;
        };
        /** EventPayloadAgreementOrganization */
        EventPayloadAgreementOrganization: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
            /** Service Consumer Id */
            service_consumer_id?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
        };
        /** EventPayloadAgreementType */
        EventPayloadAgreementType: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
            /** Service Consumer Id */
            service_consumer_id?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            price?: components["schemas"]["PricePayload"] | null;
            billing_type?: components["schemas"]["BillingType"] | null;
            /** Billing Period Length */
            billing_period_length?: number | null;
            billing_period_unit?: components["schemas"]["BillingPeriodUnit"] | null;
        };
        /** EventPayloadBillingAgreement */
        EventPayloadBillingAgreement: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Agreement Type Id
             * Format: uuid
             */
            agreement_type_id: string;
            /**
             * Service Consumer Id
             * Format: uuid
             */
            service_consumer_id: string;
            /** Service Provider Id */
            service_provider_id?: string | null;
            category?: components["schemas"]["AgreementTypeCategory"] | null;
            /**
             * Cancelled
             * @default false
             */
            cancelled: boolean;
        };
        /** EventPayloadId */
        EventPayloadId: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** EventPayloadPolicy */
        EventPayloadPolicy: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Policy Type Id
             * Format: uuid
             */
            policy_type_id: string;
        };
        /** EventPayloadPolicyAssignment */
        EventPayloadPolicyAssignment: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Policy Type Id
             * Format: uuid
             */
            policy_type_id: string;
            /** Organization Id */
            organization_id?: string | null;
            /** Organization User Id */
            organization_user_id?: string | null;
        };
        /** EventPayloadRequest */
        EventPayloadRequest: {
            /** Ip Address */
            ip_address: string;
        };
        /** EventPayloadSignup */
        EventPayloadSignup: {
            method: components["schemas"]["SignupMethod"];
        };
        /** EventRead */
        EventRead: {
            type: components["schemas"]["EventType"];
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** User Id */
            user_id?: string | null;
            /** Organization Id */
            organization_id?: string | null;
            /** Oauth Client Id */
            oauth_client_id?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /** Service Provider User Id */
            service_provider_user_id?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Payload */
            payload?: Record<string, never> | null;
        };
        /**
         * EventType
         * @enum {string}
         */
        EventType: "LOGIN" | "LOGIN_FAILED" | "LOGOUT" | "ONBOARDING_COMPLETED" | "ONBOARDING_USER_UPDATED" | "ORGANIZATION_CREATED" | "ORGANIZATION_USER_REMOVED" | "SIGNUP_STARTED" | "SIGNUP_COMPLETED" | "PASSWORD_FORGOTTEN" | "PASSWORD_RESET" | "ORGANIZATION_GROUP_CREATED" | "ORGANIZATION_GROUP_REMOVED" | "ORGANIZATION_USER_INVITED" | "ORGANIZATION_USER_ACCEPTED" | "ORGANIZATION_USER_COMPLETED" | "ORGANIZATION_USER_ADDED" | "SERVICE_CONSUMER_CREATED" | "AGREEMENT_ALLOCATED" | "AGREEMENT_ACTIVATED" | "AGREEMENT_CANCELLED" | "AGREEMENT_ASSIGNED" | "POLICY_ASSIGNED" | "POLICY_REMOVED" | "SERVICE_CONSUMER_ACTIVATED" | "SERVICE_CONSUMER_DEACTIVATED" | "PASSWORD_UPDATED" | "USER_LOCKED" | "SSO_CONFIGURED" | "SSO_ENABLED" | "SSO_DISABLED" | "SSO_REMOVED" | "BILLING_AGREEMENT_TYPE_CREATE" | "BILLING_AGREEMENT_TYPE_UPDATE" | "BILLING_AGREEMENT_CREATE" | "INVOICE_CREATED" | "INVOICE_PAID" | "INVOICE_OVERDUE" | "CHARGE_PAID" | "CHARGE_FAILED";
        /** EventViewRead */
        EventViewRead: {
            type: components["schemas"]["EventType"];
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** User Id */
            user_id?: string | null;
            /** Organization Id */
            organization_id?: string | null;
            /** Oauth Client Id */
            oauth_client_id?: string | null;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /** Service Provider User Id */
            service_provider_user_id?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Payload */
            payload?: Record<string, never> | null;
            /** User Name */
            user_name?: string | null;
            /** Organization Name */
            organization_name?: string | null;
            /** Oauth Client Name */
            oauth_client_name?: string | null;
            /** Service Provider Name */
            service_provider_name?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InvoicesMetricsRead */
        InvoicesMetricsRead: {
            /** Total Invoice Amounts */
            total_invoice_amounts: {
                [key: string]: number;
            };
            /** Total Paid Invoice Amounts */
            total_paid_invoice_amounts: {
                [key: string]: number;
            };
            /** Total Overdue Invoice Amounts */
            total_overdue_invoice_amounts: {
                [key: string]: number;
            };
        };
        /** PaginationSchema[AuditEventViewRead] */
        PaginationSchema_AuditEventViewRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["AuditEventViewRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[EventViewRead] */
        PaginationSchema_EventViewRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["EventViewRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PricePayload */
        PricePayload: {
            /** Amount */
            amount: number;
            currency: components["schemas"]["Currency"];
        };
        /**
         * SignupMethod
         * @enum {string}
         */
        SignupMethod: "google" | "microsoft" | "email";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    load_data_load__dataset_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unload_graphql_unload_graphql_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    events_read_events_get: {
        parameters: {
            query?: {
                /** @description Type of Event */
                event_type?: components["schemas"]["EventType"] | null;
                /** @description Min Date of Event */
                from_date?: string | null;
                /** @description Max Date of Event */
                until_date?: string | null;
                /** @description ID of the User */
                user_id?: string | null;
                /** @description ID of the Organization */
                organization_id?: string | null;
                /** @description ID of the OAuth Client */
                oauth_client_id?: string | null;
                /** @description ID of the Service Provider */
                service_provider_id?: string | null;
                /** @description IDs of the Organization(s) associated with the Events */
                organization_ids?: string[];
                /** @description Term to search for Events */
                query?: string | null;
                /** @description Events Offset */
                offset?: number;
                /** @description Max number of Events */
                limit?: number;
                /** @description Attributes used to sort the Events: ['type', 'timestamp'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_EventViewRead_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_create_events_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    event_types_read_event_types_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventType"][];
                };
            };
        };
    };
    audit_events_read_audit_events_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization */
                organization_id?: string | null;
                /** @description ID of the Service Provider */
                service_provider_id?: string | null;
                /** @description Min Date of Audit Event */
                from_date?: string | null;
                /** @description Max Date of Audit Event */
                until_date?: string | null;
                /** @description ID of the User */
                user_id?: string | null;
                /** @description ID of the OAuth Client */
                oauth_client_id?: string | null;
                /** @description ID of the Object modified */
                object_id?: string | null;
                /** @description Audit Events Offset */
                offset?: number;
                /** @description Max number of Audit Events */
                limit?: number;
                /** @description Attributes used to sort the Audit Events: ['event_date', 'event_action'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Audit Events Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_AuditEventViewRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_metrics_read_service_providers__service_provider_id__agreements_metrics_get: {
        parameters: {
            query?: {
                /** @description ID of the Agreement Type */
                agreement_type_id?: string;
                /** @description Filter by category */
                category?: components["schemas"]["AgreementTypeCategory"];
                /** @description Start Date */
                start_date?: string;
                /** @description End Date */
                end_date?: string;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementMetricsRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    agreement_types_metrics_read_service_providers__service_provider_id__agreement_types__agreement_type_id__get: {
        parameters: {
            query?: {
                /** @description Start Date */
                start_date?: string;
                /** @description End Date */
                end_date?: string;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Agreement Type */
                agreement_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgreementTypeMetricsRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    invoices_metrics_read_service_providers__service_provider_id__invoices_metrics_get: {
        parameters: {
            query?: {
                /** @description Start Date */
                start_date?: string | null;
                /** @description End Date */
                end_date?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicesMetricsRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    charge_metrics_read_service_providers__service_provider_id__charge_metrics_get: {
        parameters: {
            query?: {
                /** @description Start Date */
                start_date?: string | null;
                /** @description End Date */
                end_date?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChargeMetricsRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    customer_organization_metrics_read_service_providers__service_provider_id__customer_organization_metrics_get: {
        parameters: {
            query?: {
                /** @description Start Date */
                start_date?: string | null;
                /** @description End Date */
                end_date?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerOrganizationMetricsRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
