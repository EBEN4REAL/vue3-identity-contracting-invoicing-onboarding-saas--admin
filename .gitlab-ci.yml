variables:
  GIT_SUBMODULE_STRATEGY: normal
  GIT_SUBMODULE_FORCE_HTTPS: "true"

workflow:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[NO_BUILD\]/
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_PROTECTED == "true"

stages:
  - prep
  - test
#  - coverage
  - build-dev
  - deploy-dev
  - build-stg
  - deploy-stg
  - build-prd
  - deploy-prd

build_test_image_sp_front:
  image: docker:20.10.16
  stage: prep
  services:
    - docker:20.10.16-dind
  when: manual
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_PIPELINE_IID
    IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  script:
    - docker login $CI_DEPLOY_REGISTRY -u $CI_GROUP_ID -p $CI_GROUP_TOKEN
    - docker build --build-arg CI_GROUP_ID=${CI_GROUP_ID} --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN} -t $IMAGE_TAG -t $IMAGE_TAG_LATEST -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $IMAGE_TAG
    - docker push $IMAGE_TAG_LATEST
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

snapshots_rebase_sp_front:
  stage: prep
  image: registry.gitlab.com/metricsmatter/it/dev/frontend/sp_front:latest
  when: manual
  before_script:
    - npm run dev &
  script:
    - CYPRESS_COVERAGE=false CYPRESS_VISUAL_REGRESSION_TYPE=base MODE=ci npm run tests:chrome:snapshots:rebase
  artifacts:
    when: always
    paths:
      - cypress/snapshots/base
  except:
    - main

changed_specs_sp_front:
  stage: test
  image: registry.gitlab.com/metricsmatter/it/dev/frontend/sp_front:latest
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[NO_TESTS\]/
      when: never
    - if: $CI_COMMIT_TAG
      when: never  # Do not run this job if it's a tag pipeline
    - if: $CI_MERGE_REQUEST_IID || $CI_PIPELINE_SOURCE == "push"
  before_script:
    - export CI_BRANCH="${CI_COMMIT_BRANCH:-$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    - npm run lint:check
    - npm run dev &
  script:
    - git fetch --no-tags --depth=1 origin $CI_BRANCH
    - git fetch --no-tags --depth=1 origin $CI_DEFAULT_BRANCH
    - git checkout origin/$CI_BRANCH
    - git checkout origin/$CI_DEFAULT_BRANCH
    - git checkout $CI_COMMIT_SHORT_SHA
    - CHANGED_SPECS=$(git diff --diff-filter=aAcCmM --name-only origin/$CI_BRANCH origin/$CI_DEFAULT_BRANCH -- cypress/cucumber/features)
    - echo $CHANGED_SPECS
    - if [ -n "$CHANGED_SPECS" ]; then CYPRESS_COVERAGE=false MODE=ci npm run tests:chrome -- --spec $CHANGED_SPECS; fi;
  artifacts:
    when: always
    paths:
      - cypress/screenshots/**/*(failed).png
      - cypress/snapshots/diff

regression_test_sp_front:
  stage: test
  image: registry.gitlab.com/metricsmatter/it/dev/frontend/sp_front:latest
  parallel: 3
  when: manual
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[NO_TESTS\]/
      when: never
    - if: $CI_MERGE_REQUEST_IID || $CI_PIPELINE_SOURCE == "push"
  before_script:
    - npm run lint:check
    - npm run dev &
  script:
    - MODE=ci npm run tests:chrome -- --spec cypress/cucumber/features/$CI_NODE_INDEX
    - mv .nyc_output/out.json .nyc_output/out-$CI_NODE_INDEX.json
  artifacts:
    when: always
    paths:
      - .nyc_output/out-*.json
      - cypress/screenshots/**/*(failed).png
      - cypress/snapshots/diff

test_sp_front:
  stage: test
  image: registry.gitlab.com/metricsmatter/it/dev/frontend/sp_front:latest
#  parallel: 3
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "false"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[NO_TESTS\]/
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  before_script:
    - npm run lint:check
    - npm run dev &
  script:
    - echo "we are no longer running tests because we are cowboys"
#    - MODE=ci npm run tests:chrome -- --spec cypress/cucumber/features/$CI_NODE_INDEX
#    - mv .nyc_output/out.json .nyc_output/out-$CI_NODE_INDEX.json
#  artifacts:
#    when: always
#    paths:
#      - .nyc_output/out-*.json
#      - cypress/screenshots/**/*(failed).png
#      - cypress/snapshots/diff

#regression_coverage_sp_front:
#  stage: coverage
#  image: registry.gitlab.com/metricsmatter/it/dev/frontend/sp_front:latest
#  needs:
#    - regression_test_sp_front
#  rules:
#    - if: $CI_COMMIT_REF_PROTECTED == "true"
#      when: never
#    - if: $CI_COMMIT_MESSAGE =~ /\[NO_TESTS\]/
#      when: never
#    - if: $CI_MERGE_REQUEST_IID || $CI_PIPELINE_SOURCE == "push"
#      when: on_success
#  coverage: '/Statements\s*: \d+\.\d+/'
#  script:
#    - npm run coverage:merge
#    - npm run coverage:report
#  artifacts:
#    when: always
#    paths:
#      - coverage/cobertura-coverage.xml
#    reports:
#      coverage_report:
#        coverage_format: cobertura
#        path: coverage/cobertura-coverage.xml

#coverage_sp_front:
#  stage: coverage
#  image: registry.gitlab.com/metricsmatter/it/dev/frontend/sp_front:latest
#  needs:
#    - test_sp_front
#  rules:
#    - if: $CI_COMMIT_REF_PROTECTED == "false"
#      when: never
#    - if: $CI_COMMIT_MESSAGE =~ /\[NO_TESTS\]/
#      when: never
#    - if: $CI_COMMIT_TAG
#      when: never
#    - when: on_success
#  coverage: '/Statements\s*: \d+\.\d+/'
#  script:
#    - npm run coverage:merge
#    - npm run coverage:report
#  artifacts:
#    when: always
#    paths:
#      - coverage/cobertura-coverage.xml
#    reports:
#      coverage_report:
#        coverage_format: cobertura
#        path: coverage/cobertura-coverage.xml

build_sp_front_dev:
  stage: build-dev
  image: node:20-alpine
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      when: manual
    - when: never
  before_script:
    - npm install vite
  script:
    - apk --no-cache add jq
    - export STAGE=dev
    - cat config/dev.json | jq  --arg stage "$STAGE" --arg domain "$DOMAINNAME" --arg idpdomain "$IDPDOMAINNAME" '.app.name = "Acme inc." | .app.url="https://admin." + $domain | .scApp.url="https://customer." + $idpdomain | .idp.url="https://idp." + $idpdomain | .idp.clientId="3c17c4a8-6525-4b5d-bffe-48aa7200f550" | .iam.url="https://api." + $domain | .onboarding.url="https://api." + $domain + "/onboarding" | .events.url="https://api." + $domain + "/events" | .policies.url="https://api." + $domain + "/policies" | .contracting.url="https://api." + $domain + "/contracting" | .billing_and_invoicing.url="https://api." + $domain + "/billing_and_invoicing" | .configuration.url="https://api." + $domain + "/configuration" | .mm.name="Acme Inc." | .unleash.url="https://api." + $domain + "/unleash/proxy" | .unleash.stage=$stage | .gtm.id="GTM-55XP36V4"' > src/mm.config.json
    - cat src/mm.config.json
    - npm run build-dev
    - ./scripts/wait-for-index && mv dist dev_dist
  artifacts:
    paths:
      - dev_dist
  environment:
    name: dev

deploy_to_aws_dev:
  stage: deploy-dev
  image: python:3.11
  tags:
    - ${DEPLOYMENT_ENVIRONMENT_DEV}
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      when: manual
    - when: never
  script:
    - apt update
    - apt install jq -y
    - pip install awscli
    - export WEB_BUCKET_NAME=$(aws ssm get-parameter --name "${DEPLOYMENT_ENVIRONMENT_DEV}-WebBucketName" --region $AWS_REGION --output text --query Parameter.Value --with-decryption)
    - export DISTRIBUTION_ID=$(aws ssm get-parameter --name "${DEPLOYMENT_ENVIRONMENT_DEV}-ServiceProviderCloudFrontDistribution" --region $AWS_REGION --output text --query Parameter.Value --with-decryption)
    - aws s3 sync dev_dist/ s3://$WEB_BUCKET_NAME/sp_front --delete
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
  environment:
    name: dev

build_sp_front:stg:
  stage: build-stg
  image: node:20-alpine
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+-.+$/
      when: on_success
    - when: never
  before_script:
    - npm install vite
  script:
    - apk --no-cache add jq
    - export STAGE=stg
    - cat config/dev.json | jq  --arg stage "$STAGE" --arg domain "$DOMAINNAME" --arg idpdomain "$IDPDOMAINNAME" '.app.name = "STG Acme inc." | .app.url="https://admin." + $domain | .scApp.url="https://customer." + $idpdomain | .idp.url="https://idp." + $idpdomain | .idp.clientId="11d02221-f6a1-4f8b-af2f-f446a2e6cecf" | .iam.url="https://api." + $domain | .onboarding.url="https://api." + $domain + "/onboarding" | .events.url="https://api." + $domain + "/events" | .policies.url="https://api." + $domain + "/policies" | .contracting.url="https://api." + $domain + "/contracting" | .billing_and_invoicing.url="https://api." + $domain + "/billing_and_invoicing" | .configuration.url="https://api." + $domain + "/configuration" | .mm.name="STG Acme Inc." | .unleash.url="https://api." + $domain + "/unleash/proxy" | .unleash.stage=$stage | .gtm.id="GTM-PQXK5HXP"' > src/mm.config.json
    - cat src/mm.config.json
    - npm version --no-git-tag-version ${CI_COMMIT_TAG:1}
    - npm run build-staging
    - ./scripts/wait-for-index && mv dist stg_dist
  artifacts:
    paths:
      - stg_dist
  environment:
    name: stg

deploy_to_aws:stg:
  stage: deploy-stg
  tags:
    - ${DEPLOYMENT_ENVIRONMENT_STG}
  image: python:3.11
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+-.+$/
      when: on_success
    - when: never
  script:
    - apt update
    - apt install jq -y
    - pip install awscli
    - export WEB_BUCKET_NAME=$(aws ssm get-parameter --name "${DEPLOYMENT_ENVIRONMENT_STG}-WebBucketName" --region $AWS_REGION --output text --query Parameter.Value --with-decryption)
    - export DISTRIBUTION_ID=$(aws ssm get-parameter --name "${DEPLOYMENT_ENVIRONMENT_STG}-CloudFrontDistribution" --region $AWS_REGION --output text --query Parameter.Value --with-decryption)
    - aws s3 sync stg_dist/ s3://$WEB_BUCKET_NAME/sp_front --delete
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
  environment:
    name: stg

build_sp_front:prd:
  stage: build-prd
  image: node:20-alpine
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
      when: on_success
    - when: never
  before_script:
    - npm install vite
  script:
    - apk --no-cache add jq
    - export STAGE=prd
    - cat config/dev.json | jq  --arg stage "$STAGE" --arg domain "$DOMAINNAME" --arg idpdomain "$IDPDOMAINNAME" '.app.name = "Veriam Admin" | .app.url="https://admin." + $domain | .scApp.url="https://customer." + $idpdomain | .idp.url="https://idp." + $idpdomain | .idp.clientId="3c17c4a8-6525-4b5d-bffe-48aa7200f550" | .iam.url="https://api." + $domain | .onboarding.url="https://api." + $domain + "/onboarding" | .events.url="https://api." + $domain + "/events" | .policies.url="https://api." + $domain + "/policies" | .contracting.url="https://api." + $domain + "/contracting" | .billing_and_invoicing.url="https://api." + $domain + "/billing_and_invoicing" | .configuration.url="https://api." + $domain + "/configuration" | .mm.name="Veriam" | .unleash.url="https://api." + $domain + "/unleash/proxy" | .unleash.stage=$stage | .gtm.id="GTM-5K7CMJSC"' > src/mm.config.json
    - cat src/mm.config.json
    - npm version --no-git-tag-version ${CI_COMMIT_TAG:1}
    - npm run build
    - ./scripts/wait-for-index && mv dist prd_dist
  artifacts:
    paths:
      - prd_dist
  environment:
    name: prd

deploy_to_aws:prd:
  stage: deploy-prd
  tags:
    - ${DEPLOYMENT_ENVIRONMENT_PRD}
  image: python:3.11
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
      when: on_success
    - when: never
  script:
    - apt update
    - apt install jq -y
    - pip install awscli
    - export WEB_BUCKET_NAME=$(aws ssm get-parameter --name "${DEPLOYMENT_ENVIRONMENT_PRD}-WebBucketName" --region $AWS_REGION --output text --query Parameter.Value --with-decryption)
    - export DISTRIBUTION_ID=$(aws ssm get-parameter --name "${DEPLOYMENT_ENVIRONMENT_PRD}-CloudFrontDistribution" --region $AWS_REGION --output text --query Parameter.Value --with-decryption)
    - aws s3 sync prd_dist/ s3://$WEB_BUCKET_NAME/sp_front --delete
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
  environment:
    name: prd
